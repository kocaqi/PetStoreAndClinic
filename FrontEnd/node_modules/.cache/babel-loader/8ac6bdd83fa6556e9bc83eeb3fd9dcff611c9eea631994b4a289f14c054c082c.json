{"ast":null,"code":"/*!\r\n * cookie\r\n * Copyright(c) 2012-2014 Roman Shtylman\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module exports.\r\n * @public\r\n */\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\n\n/**\r\n * RegExp to match field-content in RFC 7230 sec 3.2\r\n *\r\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n * field-vchar   = VCHAR / obs-text\r\n * obs-text      = %x80-FF\r\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\r\n * Parse a cookie header.\r\n *\r\n * Parse the given cookie header string into an object\r\n * The object has the various cookies as keys(names) => values\r\n *\r\n * @param {string} str\r\n * @param {object} [options]\r\n * @return {object}\r\n * @public\r\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n  var obj = {};\n  var opt = options || {};\n  var pairs = str.split(';');\n  var dec = opt.decode || decode;\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i];\n    var index = pair.indexOf('=');\n\n    // skip things that don't look like key=value\n    if (index < 0) {\n      continue;\n    }\n    var key = pair.substring(0, index).trim();\n\n    // only assign once\n    if (undefined == obj[key]) {\n      var val = pair.substring(index + 1, pair.length).trim();\n\n      // quoted values\n      if (val[0] === '\"') {\n        val = val.slice(1, -1);\n      }\n      obj[key] = tryDecode(val, dec);\n    }\n  }\n  return obj;\n}\n\n/**\r\n * Serialize data into a cookie header.\r\n *\r\n * Serialize the a name value pair into a cookie string suitable for\r\n * http headers. An optional options object specified cookie parameters.\r\n *\r\n * serialize('foo', 'bar', { httpOnly: true })\r\n *   => \"foo=bar; httpOnly\"\r\n *\r\n * @param {string} name\r\n * @param {string} val\r\n * @param {object} [options]\r\n * @return {string}\r\n * @public\r\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n  var value = enc(val);\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n  var str = name + '=' + value;\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid');\n    }\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n    str += '; Domain=' + opt.domain;\n  }\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n    str += '; Path=' + opt.path;\n  }\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n  if (opt.secure) {\n    str += '; Secure';\n  }\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n  return str;\n}\n\n/**\r\n * Try decoding a string using a decoding function.\r\n *\r\n * @param {string} str\r\n * @param {function} decode\r\n * @private\r\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}","map":{"version":3,"names":["exports","parse","serialize","decode","decodeURIComponent","encode","encodeURIComponent","fieldContentRegExp","str","options","TypeError","obj","opt","pairs","split","dec","i","length","pair","index","indexOf","key","substring","trim","undefined","val","slice","tryDecode","name","enc","test","value","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","toUTCString","httpOnly","secure","sameSite","toLowerCase","e"],"sources":["C:/Users/albic/OneDrive/Desktop/School Project/PetStoreAndClinic/react/node_modules/universal-cookie/node_modules/cookie/index.js"],"sourcesContent":["/*!\r\n * cookie\r\n * Copyright(c) 2012-2014 Roman Shtylman\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nexports.parse = parse;\r\nexports.serialize = serialize;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar decode = decodeURIComponent;\r\nvar encode = encodeURIComponent;\r\n\r\n/**\r\n * RegExp to match field-content in RFC 7230 sec 3.2\r\n *\r\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n * field-vchar   = VCHAR / obs-text\r\n * obs-text      = %x80-FF\r\n */\r\n\r\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\r\n\r\n/**\r\n * Parse a cookie header.\r\n *\r\n * Parse the given cookie header string into an object\r\n * The object has the various cookies as keys(names) => values\r\n *\r\n * @param {string} str\r\n * @param {object} [options]\r\n * @return {object}\r\n * @public\r\n */\r\n\r\nfunction parse(str, options) {\r\n  if (typeof str !== 'string') {\r\n    throw new TypeError('argument str must be a string');\r\n  }\r\n\r\n  var obj = {}\r\n  var opt = options || {};\r\n  var pairs = str.split(';')\r\n  var dec = opt.decode || decode;\r\n\r\n  for (var i = 0; i < pairs.length; i++) {\r\n    var pair = pairs[i];\r\n    var index = pair.indexOf('=')\r\n\r\n    // skip things that don't look like key=value\r\n    if (index < 0) {\r\n      continue;\r\n    }\r\n\r\n    var key = pair.substring(0, index).trim()\r\n\r\n    // only assign once\r\n    if (undefined == obj[key]) {\r\n      var val = pair.substring(index + 1, pair.length).trim()\r\n\r\n      // quoted values\r\n      if (val[0] === '\"') {\r\n        val = val.slice(1, -1)\r\n      }\r\n\r\n      obj[key] = tryDecode(val, dec);\r\n    }\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Serialize data into a cookie header.\r\n *\r\n * Serialize the a name value pair into a cookie string suitable for\r\n * http headers. An optional options object specified cookie parameters.\r\n *\r\n * serialize('foo', 'bar', { httpOnly: true })\r\n *   => \"foo=bar; httpOnly\"\r\n *\r\n * @param {string} name\r\n * @param {string} val\r\n * @param {object} [options]\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction serialize(name, val, options) {\r\n  var opt = options || {};\r\n  var enc = opt.encode || encode;\r\n\r\n  if (typeof enc !== 'function') {\r\n    throw new TypeError('option encode is invalid');\r\n  }\r\n\r\n  if (!fieldContentRegExp.test(name)) {\r\n    throw new TypeError('argument name is invalid');\r\n  }\r\n\r\n  var value = enc(val);\r\n\r\n  if (value && !fieldContentRegExp.test(value)) {\r\n    throw new TypeError('argument val is invalid');\r\n  }\r\n\r\n  var str = name + '=' + value;\r\n\r\n  if (null != opt.maxAge) {\r\n    var maxAge = opt.maxAge - 0;\r\n\r\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\r\n      throw new TypeError('option maxAge is invalid')\r\n    }\r\n\r\n    str += '; Max-Age=' + Math.floor(maxAge);\r\n  }\r\n\r\n  if (opt.domain) {\r\n    if (!fieldContentRegExp.test(opt.domain)) {\r\n      throw new TypeError('option domain is invalid');\r\n    }\r\n\r\n    str += '; Domain=' + opt.domain;\r\n  }\r\n\r\n  if (opt.path) {\r\n    if (!fieldContentRegExp.test(opt.path)) {\r\n      throw new TypeError('option path is invalid');\r\n    }\r\n\r\n    str += '; Path=' + opt.path;\r\n  }\r\n\r\n  if (opt.expires) {\r\n    if (typeof opt.expires.toUTCString !== 'function') {\r\n      throw new TypeError('option expires is invalid');\r\n    }\r\n\r\n    str += '; Expires=' + opt.expires.toUTCString();\r\n  }\r\n\r\n  if (opt.httpOnly) {\r\n    str += '; HttpOnly';\r\n  }\r\n\r\n  if (opt.secure) {\r\n    str += '; Secure';\r\n  }\r\n\r\n  if (opt.sameSite) {\r\n    var sameSite = typeof opt.sameSite === 'string'\r\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\r\n\r\n    switch (sameSite) {\r\n      case true:\r\n        str += '; SameSite=Strict';\r\n        break;\r\n      case 'lax':\r\n        str += '; SameSite=Lax';\r\n        break;\r\n      case 'strict':\r\n        str += '; SameSite=Strict';\r\n        break;\r\n      case 'none':\r\n        str += '; SameSite=None';\r\n        break;\r\n      default:\r\n        throw new TypeError('option sameSite is invalid');\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n/**\r\n * Try decoding a string using a decoding function.\r\n *\r\n * @param {string} str\r\n * @param {function} decode\r\n * @private\r\n */\r\n\r\nfunction tryDecode(str, decode) {\r\n  try {\r\n    return decode(str);\r\n  } catch (e) {\r\n    return str;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}