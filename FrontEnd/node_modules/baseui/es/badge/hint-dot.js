function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { useStyletron } from '../styles/index';
import { getOverrides } from '../helpers/overrides';
import { StyledHintDot, StyledRoot, StyledPositioner } from './styled-components';
import { PLACEMENT, ROLE } from './constants';
import { getAnchorFromChildren } from './utils';

const HintDot = ({
  children,
  color,
  horizontalOffset: horizontalOffsetProp,
  verticalOffset: verticalOffsetProp,
  hidden,
  overrides = {}
}) => {
  const [HintDot, hintDotProps] = getOverrides(overrides.Badge, StyledHintDot);
  const [Root, rootProps] = getOverrides(overrides.Root, StyledRoot);
  const [Positioner, positionerProps] = getOverrides(overrides.Positioner, StyledPositioner);
  const [, theme] = useStyletron();
  const anchor = getAnchorFromChildren(children); // if the anchor is a string, we supply default offsets

  let horizontalOffset = horizontalOffsetProp;
  let verticalOffset = verticalOffsetProp;

  if (typeof anchor === 'string') {
    if (!horizontalOffset) {
      horizontalOffset = '-14px';
    }

    if (!verticalOffset) {
      verticalOffset = '-4px';
    }
  }

  return /*#__PURE__*/React.createElement(Root, rootProps, anchor, /*#__PURE__*/React.createElement(Positioner, _extends({
    $horizontalOffset: horizontalOffset,
    $verticalOffset: verticalOffset,
    $placement: theme.direction === 'rtl' ? PLACEMENT.topLeft : PLACEMENT.topRight,
    $role: ROLE.hintDot
  }, positionerProps), /*#__PURE__*/React.createElement(HintDot, _extends({}, hintDotProps, {
    $color: color,
    $horizontalOffset: horizontalOffset,
    $hidden: hidden
  }))));
};

export default HintDot;