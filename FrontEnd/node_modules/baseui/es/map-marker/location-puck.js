function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { useStyletron } from '../styles';
import { getOverrides } from '../helpers/overrides';
import { LOCATION_PUCK_SIZES, LOCATION_PUCK_TYPES, EARNER_LOCATION_PUCK_CORE_SCALES } from './constants';
import { LocationPuckContainer, StyledConsumerLocationPuckCore, StyledLocationPuckApproximation, StyledEarnerLocationPuckCore } from './styled-components';

const ConsumerLocationPuckHeading = ({
  heading
}) => {
  const [css, theme] = useStyletron();
  return /*#__PURE__*/React.createElement("svg", {
    className: css({
      height: `${6}px`,
      width: `${11}px`,
      position: 'absolute',
      color: theme.colors.contentAccent,
      transition: `${theme.animation.timing300} ${theme.animation.easeOutCurve} all`
    }),
    style: {
      transform: `rotate(${heading}deg) translateY(-16px)`
    },
    width: "11",
    height: "6",
    viewBox: "0 0 11 6",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M5.5 0L0 6L5.5 5L11 6L5.5 0Z",
    fill: "currentColor"
  }));
};

const ConsumerLocationPuck = ({
  heading,
  showHeading,
  confidenceRadius,
  overrides
}) => {
  const [, theme] = useStyletron();
  const [Root, rootProps] = getOverrides(overrides.Root, LocationPuckContainer);
  const [ConsumerLocationPuckCore, consumerLocationPuckCoreProps] = getOverrides(overrides.ConsumerLocationPuckCore, StyledConsumerLocationPuckCore);
  const [LocationPuckApproximation, locationPuckApproximationProps] = getOverrides(overrides.LocationPuckApproximation, StyledLocationPuckApproximation);
  return /*#__PURE__*/React.createElement(Root, rootProps, /*#__PURE__*/React.createElement(LocationPuckApproximation, _extends({
    $color: theme.colors.contentAccent,
    $radius: confidenceRadius
  }, locationPuckApproximationProps)), /*#__PURE__*/React.createElement(ConsumerLocationPuckCore, consumerLocationPuckCoreProps), showHeading && /*#__PURE__*/React.createElement(ConsumerLocationPuckHeading, {
    heading: heading
  }));
};

const EarnerLocationPuckHeading = ({
  size,
  color,
  heading
}) => {
  const [css, theme] = useStyletron();
  return /*#__PURE__*/React.createElement("svg", {
    className: css({
      position: 'absolute',
      transition: `${theme.animation.timing300} ${theme.animation.easeOutCurve} all`
    }),
    style: {
      transform: `rotate(${heading}deg) scale(${EARNER_LOCATION_PUCK_CORE_SCALES[size]})`
    },
    width: "72",
    height: "72",
    viewBox: "0 0 72 72",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M36 20L52 52L36 42.8571L20 52L36 20Z",
    fill: color
  }));
};

const EarnerLocationPuck = ({
  heading,
  confidenceRadius,
  size,
  overrides
}) => {
  const [, theme] = useStyletron();
  const color = theme.colors.contentPrimary;
  const [Root, rootProps] = getOverrides(overrides.Root, LocationPuckContainer);
  const [LocationPuckApproximation, locationPuckApproximationProps] = getOverrides(overrides.LocationPuckApproximation, StyledLocationPuckApproximation);
  const [EarnerLocationPuckCore, earnerLocationPuckCoreProps] = getOverrides(overrides.EarnerLocationPuckCore, StyledEarnerLocationPuckCore);
  return /*#__PURE__*/React.createElement(Root, rootProps, /*#__PURE__*/React.createElement(LocationPuckApproximation, _extends({
    $color: color,
    $radius: confidenceRadius
  }, locationPuckApproximationProps)), /*#__PURE__*/React.createElement(EarnerLocationPuckCore, _extends({
    $color: color,
    $size: size
  }, earnerLocationPuckCoreProps)), /*#__PURE__*/React.createElement(EarnerLocationPuckHeading, {
    size: size,
    color: color,
    heading: heading
  }));
};

const LocationPuck = ({
  size = LOCATION_PUCK_SIZES.medium,
  heading = 0,
  showHeading = true,
  confidenceRadius = 0,
  type = LOCATION_PUCK_TYPES.consumer,
  overrides = {}
}) => {
  if (process.env.NODE_ENV !== "production") {
    if (size !== LOCATION_PUCK_SIZES.medium && type === LOCATION_PUCK_TYPES.consumer) {
      console.warn(`Location puck size can only be applied to type === LOCATION_PUCK_TYPES.earner`);
    }

    if (!showHeading && type === LOCATION_PUCK_TYPES.earner) {
      console.warn(`Earner location puck must show the heading indicator`);
    }
  }

  const sharedProps = {
    heading,
    confidenceRadius,
    overrides
  };
  return type === LOCATION_PUCK_TYPES.consumer ? /*#__PURE__*/React.createElement(ConsumerLocationPuck, _extends({}, sharedProps, {
    showHeading: showHeading
  })) : /*#__PURE__*/React.createElement(EarnerLocationPuck, _extends({}, sharedProps, {
    size: size
  }));
};

export default LocationPuck;