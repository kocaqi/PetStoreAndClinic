function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { NestedMenuContext } from './nested-menus';
import { Popover } from '../popover';
import { getOverrides, mergeOverrides } from '../helpers/overrides';

const MaybeChildMenu = props => {
  if (!props.getChildMenu) {
    // @ts-expect-error todo(flow->ts): children should be of type ReactElement or null
    return props.children;
  }

  const ChildMenu = props.getChildMenu(props.item);

  if (!ChildMenu) {
    // @ts-expect-error todo(flow->ts): children should be of type ReactElement or null
    return props.children;
  }

  const {
    overrides = {}
  } = props;
  const [PopoverOverride, popoverProps] = getOverrides(overrides.ChildMenuPopover, Popover);
  return /*#__PURE__*/React.createElement(NestedMenuContext.Consumer, null, ctx => {
    return /*#__PURE__*/React.createElement(PopoverOverride, _extends({
      focusLock: false,
      autoFocus: false,
      isOpen: props.isOpen,
      renderAll: props.renderAll,
      content: ChildMenu,
      ignoreBoundary: true,
      mountNode: ctx.mountRef.current ? ctx.mountRef.current : undefined,
      onClick: props.onClick,
      onMouseEnterDelay: 30,
      onMouseLeaveDelay: 30,
      onEsc: props.resetParentMenu,
      placement: "rightTop"
    }, popoverProps, {
      overrides: mergeOverrides({
        Body: {
          props: {
            // Trap tabbing when focused on a child menu. Popover mounts the element at the end of
            // the html body by default. If a user was to tab to the next element it would navigate
            // to elements not within the immediate area surrounding the menu.
            onKeyDown: e => {
              if (e.keyCode === 9) {
                e.preventDefault();
              }
            }
          }
        }
      }, popoverProps.overrides)
    }), props.children);
  });
};

export default MaybeChildMenu;