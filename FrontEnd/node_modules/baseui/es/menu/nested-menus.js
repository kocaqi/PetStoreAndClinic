function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
export const NestedMenuContext = /*#__PURE__*/React.createContext({
  addMenuToNesting: () => {},
  removeMenuFromNesting: () => {},
  // @ts-expect-error todo(flow->ts): incorrect default value
  getParentMenu: () => {},
  // @ts-expect-error todo(flow->ts): incorrect default value
  getChildMenu: () => {},
  nestedMenuHoverIndex: -1,
  isNestedMenuVisible: () => false,
  mountRef: {
    current: null
  }
});

function isSame(a, b) {
  if (!a || !b) {
    return false;
  }

  return a.isSameNode(b);
}

export default class NestedMenus extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      menus: [],
      nestedMenuHoverIndex: -1
    });

    _defineProperty(this, "mountRef", /*#__PURE__*/React.createRef());

    _defineProperty(this, "mouseLeaveTimeoueId", null);

    _defineProperty(this, "handleMenuMouseLeave", event => {
      this.mouseLeaveTimeoueId = setTimeout(() => {
        this.setState({
          nestedMenuHoverIndex: -1
        });
      }, 200);
    });

    _defineProperty(this, "handleMenuMouseEnter", event => {
      if (typeof document !== 'undefined') {
        clearTimeout(this.mouseLeaveTimeoueId);
        const index = this.state.menus.findIndex(m => {
          return m.current && event.currentTarget instanceof Node && m.current.contains(event.currentTarget);
        });
        this.setState({
          nestedMenuHoverIndex: index
        });
      }
    });

    _defineProperty(this, "addMenuToNesting", ref => {
      // check offsetHeight to determine if component is visible in the dom (0 means hidden)
      // we need to do this so that when we renderAll, the hidden seo-only child-menus don't
      // register themselves which would break the nesting logic
      const element = ref.current;

      if (element && element.offsetHeight) {
        element.addEventListener('mouseenter', this.handleMenuMouseEnter);
        element.addEventListener('mouseleave', this.handleMenuMouseLeave);
        this.setState(state => {
          return {
            menus: [...state.menus, ref]
          };
        });
      }
    });

    _defineProperty(this, "removeMenuFromNesting", ref => {
      this.setState(state => {
        for (const r of this.state.menus) {
          if (r.current && isSame(r.current, ref.current)) {
            const element = r.current;
            element.removeEventListener('mouseenter', this.handleMenuMouseEnter);
            element.removeEventListener('mouseleave', this.handleMenuMouseLeave);
          }
        }

        const nextMenus = state.menus.filter(r => {
          return r.current && !isSame(r.current, ref.current);
        });
        return {
          menus: nextMenus
        };
      });
    });

    _defineProperty(this, "findMenuIndexByRef", ref => {
      return this.state.menus.findIndex(r => isSame(r.current, ref.current));
    });

    _defineProperty(this, "getParentMenu", ref => {
      const index = this.findMenuIndexByRef(ref) - 1;
      return this.state.menus[index];
    });

    _defineProperty(this, "getChildMenu", ref => {
      const index = this.findMenuIndexByRef(ref) + 1;
      return this.state.menus[index];
    });

    _defineProperty(this, "isNestedMenuVisible", ref => {
      const index = this.findMenuIndexByRef(ref);
      return index <= this.state.nestedMenuHoverIndex;
    });
  }

  render() {
    return /*#__PURE__*/React.createElement(NestedMenuContext.Provider, {
      value: {
        addMenuToNesting: this.addMenuToNesting,
        removeMenuFromNesting: this.removeMenuFromNesting,
        getParentMenu: this.getParentMenu,
        getChildMenu: this.getChildMenu,
        isNestedMenuVisible: this.isNestedMenuVisible,
        nestedMenuHoverIndex: this.state.nestedMenuHoverIndex,
        mountRef: this.mountRef
      }
    }, /*#__PURE__*/React.createElement(React.Fragment, null, this.props.children, /*#__PURE__*/React.createElement("span", {
      ref: this.mountRef
    })));
  }

}