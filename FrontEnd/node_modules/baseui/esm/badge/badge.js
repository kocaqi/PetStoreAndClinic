function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverrides } from '../helpers/overrides';
import { StyledBadge, StyledRoot, StyledPositioner } from './styled-components';
import { PLACEMENT, ROLE, SHAPE, HIERARCHY } from './constants';
import { getAnchorFromChildren } from './utils';

var Badge = function Badge(_ref) {
  var children = _ref.children,
      content = _ref.content,
      color = _ref.color,
      _ref$shape = _ref.shape,
      shape = _ref$shape === void 0 ? SHAPE.rectangle : _ref$shape,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? PLACEMENT.topRight : _ref$placement,
      hierarchy = _ref.hierarchy,
      horizontalOffset = _ref.horizontalOffset,
      verticalOffset = _ref.verticalOffset,
      hidden = _ref.hidden,
      _ref$overrides = _ref.overrides,
      overrides = _ref$overrides === void 0 ? {} : _ref$overrides;

  var _getOverrides = getOverrides(overrides.Badge, StyledBadge),
      _getOverrides2 = _slicedToArray(_getOverrides, 2),
      Badge = _getOverrides2[0],
      badgeProps = _getOverrides2[1];

  var _getOverrides3 = getOverrides(overrides.Root, StyledRoot),
      _getOverrides4 = _slicedToArray(_getOverrides3, 2),
      Root = _getOverrides4[0],
      rootProps = _getOverrides4[1];

  var _getOverrides5 = getOverrides(overrides.Positioner, StyledPositioner),
      _getOverrides6 = _slicedToArray(_getOverrides5, 2),
      Positioner = _getOverrides6[0],
      positionerProps = _getOverrides6[1];

  var anchor = getAnchorFromChildren(children);
  var VALID_RECT_PLACEMENTS = [PLACEMENT.topLeft, PLACEMENT.topRight, PLACEMENT.bottomRight, PLACEMENT.bottomLeft];

  if (process.env.NODE_ENV !== "production") {
    if (shape === SHAPE.rectangle && !VALID_RECT_PLACEMENTS.includes(placement)) {
      console.warn('Rectangle badges should only be placed in a corner or used inline');
    }

    if (shape === SHAPE.rectangle && hierarchy === HIERARCHY.secondary && anchor) {
      console.warn('Secondary badges should not be positioned. Use the inline version of this badge instead.');
    }

    if (shape === SHAPE.pill && hierarchy === HIERARCHY.secondary) {
      console.warn('Pill badges should only be used with primary hierarchy');
    }
  } // If there's no anchor, render the badge inline


  if (!anchor) {
    return /*#__PURE__*/React.createElement(Badge, _extends({
      $hierarchy: hierarchy,
      $shape: shape,
      $color: color,
      $hidden: hidden
    }, badgeProps), content);
  }

  return /*#__PURE__*/React.createElement(Root, rootProps, anchor, /*#__PURE__*/React.createElement(Positioner, _extends({
    $horizontalOffset: horizontalOffset,
    $verticalOffset: verticalOffset,
    $placement: placement,
    $role: ROLE.badge
  }, positionerProps), /*#__PURE__*/React.createElement(Badge, _extends({
    $hierarchy: hierarchy,
    $shape: shape,
    $color: color,
    $hidden: hidden
  }, badgeProps), content)));
};

export default Badge;