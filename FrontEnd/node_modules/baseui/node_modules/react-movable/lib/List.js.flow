// @flow
import * as React from 'react';

export interface IVoiceover {
  item: (position: number) => string;
  lifted: (position: number) => string;
  dropped: (from: number, to: number) => string;
  moved: (position: number, up: boolean) => string;
  canceled: (position: number) => string;
}
declare type IItemProps = {
  key?: number,
  tabIndex?: number,
  'aria-roledescription'?: string,
  onKeyDown?: (e: SyntheticEvent<*>) => void,
  onWheel?: (e: SyntheticEvent<*>) => void,
  style?: CSSStyleDeclaration,
  ref?: React.Ref<any>
};
declare interface IListProps<Value> {
  renderItem: (params: {
    value: Value,
    props: IItemProps,
    index?: number,
    isDragged: boolean,
    isSelected: boolean,
    isOutOfBounds: boolean
  }) => React.Node;
  renderList: (props: {
    children: any,
    isDragged: boolean,
    props: {
      ref: React.Ref<any>
    }
  }) => React.Node;
  values: Value[];
  onChange: (meta: {
    oldIndex: number,
    newIndex: number,
    targetRect: ClientRect
  }) => mixed;
  beforeDrag?: (params: {
    elements: HTMLElement[],
    index: number
  }) => mixed;
  transitionDuration?: number;
  removableByMove?: boolean;
  lockVertically?: boolean;
  voiceover?: IVoiceover;
  container?: Element | null;
}
declare export default class List extends React$Component<IListProps<*>> {}
