import * as React from 'react';
import type { OnChangeParams, Option } from '../select';
import { filterOptions } from '../select';
import DateHelpers from '../datepicker/utils/date-helpers';
import type { TimePickerDefaultProps, TimePickerProps, TimePickerState } from './types';
declare class TimePicker<T = Date> extends React.Component<TimePickerProps<T>, TimePickerState> {
    static defaultProps: TimePickerDefaultProps;
    dateHelpers: DateHelpers<T>;
    state: {
        steps: any[];
        value: any;
    };
    constructor(props: TimePickerProps<T>);
    componentDidMount(): void;
    componentDidUpdate(prevProps: TimePickerProps<T>): void;
    onChange: (params: OnChangeParams) => void;
    secondsToLabel: (seconds: number, format?: '12' | '24') => string;
    /**
     * Converts a time string, e.g. 10:00, to one or more possible TimePicker
     * options representing that time.
     */
    stringToOptions: (a: string, format?: '12' | '24') => Array<Option>;
    handleChange: (seconds: number) => void;
    setTime: (d: T | undefined | null, c: number, b: number, a: number) => T;
    getTimeWindowInSeconds: (step: number) => {
        start: number;
        end: number;
    };
    buildSteps: () => any[];
    creatableFilterOptions: typeof filterOptions;
    buildSelectedOption: (b: T, a: '12' | undefined | null | '24') => Option;
    render(): JSX.Element;
}
export default TimePicker;
