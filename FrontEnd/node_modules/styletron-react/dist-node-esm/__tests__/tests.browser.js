import Enzyme from "enzyme";
import Adapter from "enzyme-adapter-react-16";
import * as React from "react";
import { styled, createStyled, withWrapper, withStyle, withTransform, Provider, useStyletron } from "../index";
import { getInitialStyle, driver } from "styletron-standard";
Enzyme.configure({
  adapter: new Adapter()
});
test("styled (static)", () => {
  const style = {
    color: "red"
  };
  const Widget = styled("div", style);
  Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: x => {
        expect(x).toEqual(style);
        return "";
      },
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(Widget, null)));
  const wrapper = Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: () => "bar",
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(Widget, {
    className: "foo"
  })));
  const divs = wrapper.find("div");
  expect(divs.length).toBe(1);
  expect(divs.hasClass("foo bar")).toBe(true);
});
test("styled (dynamic)", () => {
  const Widget = styled("div", props => ({
    color: props.$foo ? "red" : "blue"
  }));
  Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: x => {
        expect(x).toEqual({
          color: "red"
        });
        return "";
      },
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(Widget, {
    $foo: true
  })));
});
test("withStyle (static)", () => {
  const Widget = styled("div", {
    borderWidth: 0,
    color: "red",
    ":hover": {
      fontSize: "12px"
    }
  });
  const SuperWidget = withStyle(Widget, {
    color: "blue",
    ":hover": {
      borderWidth: "10px"
    }
  });
  Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: x => {
        expect(x).toEqual({
          borderWidth: 0,
          color: "blue",
          ":hover": {
            fontSize: "12px",
            borderWidth: "10px"
          }
        });
        return "";
      },
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(SuperWidget, null)));
});
test("withStyle (dynamic)", () => {
  const Widget = styled("div", {
    lineHeight: 1,
    color: "red",
    ":hover": {
      fontSize: "12px"
    }
  });
  const SuperWidget = withStyle(Widget, props => ({
    background: props.$round ? "yellow" : "green",
    ":hover": {
      borderWidth: 0
    }
  }));
  Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: x => {
        expect(x).toEqual({
          color: "red",
          background: "yellow",
          lineHeight: 1,
          ":hover": {
            borderWidth: 0,
            fontSize: "12px"
          }
        });
        return "";
      },
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(SuperWidget, {
    $round: true
  })));
});
test("$style prop (static)", () => {
  const Widget = styled("div", {
    lineHeight: 1,
    color: "red",
    ":hover": {
      fontSize: "12px"
    }
  });
  Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: x => {
        expect(x).toEqual({
          color: "blue",
          lineHeight: 1,
          ":hover": {
            fontSize: "12px"
          }
        });
        return "";
      },
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(Widget, {
    $style: {
      color: "blue"
    }
  })));
});
test("$style prop (dynamic)", () => {
  const Widget = styled("div", {
    lineHeight: 1,
    color: "red",
    ":hover": {
      fontSize: "12px"
    }
  });
  Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: x => {
        expect(x).toEqual({
          color: "blue",
          background: "yellow",
          lineHeight: 1,
          ":hover": {
            fontSize: "12px",
            borderWidth: 0
          }
        });
        return "";
      },
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(Widget, {
    $style: props => ({
      color: "blue",
      background: props.$round ? "yellow" : "green",
      ":hover": {
        borderWidth: 0
      }
    }),
    $round: true
  })));
});
test("$style overrides nested withStyle", () => {
  const Widget = styled("div", {
    color: "red",
    fontSize: "12px"
  });
  const WidgetColor = withStyle(Widget, {
    color: "blue"
  });
  const WidgetFontSize = withStyle(WidgetColor, {
    fontSize: "14px"
  });
  Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: x => {
        expect(x).toEqual({
          color: "yellow",
          fontSize: "14px",
          padding: "10px"
        });
        return "";
      },
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(WidgetFontSize, {
    $style: {
      color: "yellow",
      padding: "10px"
    }
  })));
});
test("withTransform", () => {
  const Widget = styled("div", {
    color: "red",
    background: "green"
  });
  const SuperWidget = withTransform(Widget, (style, props) => ({ ...style,
    background: props.$round ? "yellow" : "green"
  }));
  Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: x => {
        expect(x).toEqual({
          color: "red",
          background: "yellow"
        });
        return "";
      },
      renderFontFace: () => {
        return "";
      },
      renderKeyframes: () => {
        return "";
      }
    }
  }, /*#__PURE__*/React.createElement(SuperWidget, {
    $round: true
  })));
});
test("$as works", () => {
  const Widget = styled("div", {});

  const MockComponent = props => {
    expect(props.className).toBe("foo");
    return /*#__PURE__*/React.createElement("div", null);
  };

  Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: () => "foo",
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(Widget, {
    $as: MockComponent
  })));
  const wrapper = Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: () => "",
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(Widget, {
    $as: "span"
  })));
  expect(wrapper.find("span").length).toBe(1);
});
test("$-prefixed props not passed", () => {
  class InnerComponent extends React.Component {
    render() {
      expect(this.props).toEqual({
        className: "styleclass",
        "data-bar": "bar"
      });
      return /*#__PURE__*/React.createElement("button", null, "InnerComponent");
    }

  }

  const Widget = styled(InnerComponent, {
    color: "red"
  });
  Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: () => "styleclass",
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(Widget, {
    $foo: "foo",
    $baz: "baz",
    "data-bar": "bar"
  })));
});
test("callback ref forwarding", () => {
  const Widget = styled("button", {
    color: "red"
  });

  class TestComponent extends React.Component {
    componentDidMount() {
      expect(this.widgetInner instanceof HTMLButtonElement).toBe(true);
    }

    render() {
      return /*#__PURE__*/React.createElement(Provider, {
        value: {
          renderStyle: () => "",
          renderKeyframes: () => "",
          renderFontFace: () => ""
        }
      }, /*#__PURE__*/React.createElement(Widget, {
        ref: c => {
          this.widgetInner = c;
        }
      }));
    }

  }

  Enzyme.mount( /*#__PURE__*/React.createElement(TestComponent, null));
});
test("React.createRef() ref forwarding", () => {
  const Widget = styled("button", {
    color: "red"
  });

  class TestComponent extends React.Component {
    widgetInner = /*#__PURE__*/React.createRef();

    componentDidMount() {
      expect(this.widgetInner.current instanceof HTMLButtonElement).toBe(true);
    }

    render() {
      return /*#__PURE__*/React.createElement(Provider, {
        value: {
          renderStyle: () => "",
          renderKeyframes: () => "",
          renderFontFace: () => ""
        }
      }, /*#__PURE__*/React.createElement(Widget, {
        ref: this.widgetInner
      }));
    }

  }

  Enzyme.mount( /*#__PURE__*/React.createElement(TestComponent, null));
});
test("React.useRef() ref forwarding", () => {
  const Widget = styled("button", {
    color: "red"
  });

  const TestComponent = () => {
    const widgetInner = React.useRef(null);
    React.useEffect(() => {
      expect(widgetInner.current instanceof HTMLButtonElement).toBe(true);
    }, []);
    return /*#__PURE__*/React.createElement(Provider, {
      value: {
        renderStyle: () => "",
        renderKeyframes: () => "",
        renderFontFace: () => ""
      }
    }, /*#__PURE__*/React.createElement(Widget, {
      ref: widgetInner
    }));
  };

  Enzyme.mount( /*#__PURE__*/React.createElement(TestComponent, null));
});
test("legacy string ref forwarding", () => {
  const Widget = styled("button", {
    color: "red"
  });

  class TestComponent extends React.Component {
    componentDidMount() {
      expect(this.refs.myButton instanceof HTMLButtonElement).toBe(true);
    }

    render() {
      return /*#__PURE__*/React.createElement(Provider, {
        value: {
          renderStyle: () => "",
          renderKeyframes: () => "",
          renderFontFace: () => ""
        }
      }, /*#__PURE__*/React.createElement(Widget, {
        ref: "myButton"
      }));
    }

  }

  Enzyme.mount( /*#__PURE__*/React.createElement(TestComponent, null));
});
test("withWrapper", () => {
  const Widget = styled("button", {
    color: "red"
  });
  const WrappedWidget = withWrapper(Widget, StyledElement => props => {
    expect(props).toEqual({
      foo: "bar"
    });
    return /*#__PURE__*/React.createElement("section", null, /*#__PURE__*/React.createElement(StyledElement, props));
  });
  const wrapper1 = Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: style => {
        expect(style).toEqual({
          color: "red"
        });
        return "";
      },
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(WrappedWidget, {
    foo: "bar"
  })));
  expect(wrapper1.find("section").length).toBe(1);
  const DeluxeWrappedWidget = withStyle(WrappedWidget, {
    color: "blue"
  });
  const wrapper2 = Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: style => {
        expect(style).toEqual({
          color: "blue"
        });
        return "";
      },
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(DeluxeWrappedWidget, {
    foo: "bar"
  })));
  expect(wrapper2.find("section").length).toBe(1);
});
test("styled debug mode (client only)", () => {
  let debugCallCount = 0;
  const style = {
    color: "red"
  };
  const Widget = styled("div", style);
  const wrapper = Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: () => "bar",
      renderKeyframes: () => "",
      renderFontFace: () => ""
    },
    debug: {
      debug: ({
        stackIndex,
        stackInfo
      }) => {
        debugCallCount++;
        expect(stackIndex).toBe(2);
        expect(typeof stackInfo).toBe("object");
        expect(typeof stackInfo.stack).toBe("string");
        expect(typeof stackInfo.message).toBe("string");
        return "__arbitrary_debug_class__";
      }
    }
  }, /*#__PURE__*/React.createElement(Widget, {
    className: "foo"
  })));
  const divs = wrapper.find("div");
  expect(divs.length).toBe(1);
  expect(divs.hasClass("__arbitrary_debug_class__ foo bar")).toBe(true);
  wrapper.unmount();
  wrapper.mount();
  wrapper.unmount();
  expect(debugCallCount).toBe(1);
});
test("styled debug mode (ssr)", () => {
  const style = {
    color: "red"
  };
  let count = 0;
  const Widget = styled("div", style);
  const wrapper = Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: () => {
        count++;
        return "foo";
      },
      renderKeyframes: () => "",
      renderFontFace: () => ""
    },
    debug: {
      debug: () => {
        expect(count).toBe(2);
        return "__some_debug_class";
      }
    },
    debugAfterHydration: true
  }, /*#__PURE__*/React.createElement(Widget, null)));
  const divs = wrapper.find("div");
  expect(count).toBe(2);
  expect(divs.hasClass("__some_debug_class foo")).toBe(true);
});
test("font-face injection", () => {
  const fontFace = {
    src: "foo"
  };
  const style = {
    fontFamily: fontFace
  };
  const Widget = styled("div", style);
  Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: x => {
        expect(x).toEqual({
          fontFamily: "foo"
        });
        return "";
      },
      renderFontFace: x => {
        expect(x).toEqual(fontFace);
        return "foo";
      },
      renderKeyframes: () => ""
    }
  }, /*#__PURE__*/React.createElement(Widget, null)));
});
test("keyframes injection", () => {
  const keyframes = {
    from: {
      color: "red"
    },
    to: {
      color: "green"
    }
  };
  const style = {
    animationName: keyframes
  };
  const Widget = styled("div", style);
  Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: x => {
        expect(x).toEqual({
          animationName: "foo"
        });
        return "";
      },
      renderKeyframes: x => {
        expect(x).toEqual(keyframes);
        return "foo";
      },
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(Widget, null)));
});
test("createStyled wrapper", () => {
  const customStyled = createStyled({
    driver,
    getInitialStyle,
    wrapper: _Component => props => {
      expect(props.foo).toBe("foo");
      return /*#__PURE__*/React.createElement("div", null, "hello world");
    }
  });
  const Widget = customStyled("div", {
    color: "red"
  });
  Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: () => "",
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(Widget, {
    foo: "foo"
  })));
});
test("useStyletron css", () => {
  function Link() {
    const [css] = useStyletron();
    const className = css({
      color: "blue"
    });
    expect(className).toBe(".abc");
    return /*#__PURE__*/React.createElement("a", {
      className: className
    }, "Foo");
  }

  Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: x => {
        expect(x).toEqual({
          color: "blue"
        });
        return ".abc";
      },
      renderKeyframes: () => "",
      renderFontFace: () => ""
    }
  }, /*#__PURE__*/React.createElement(Link, null)));
});
test("useStyletron debug mode", () => {
  function Widget() {
    const [css] = useStyletron();
    const [on, setOn] = React.useState(false);
    const className = css({
      color: "red"
    });
    return /*#__PURE__*/React.createElement("button", {
      onClick: () => setOn(!on),
      className: className
    }, "test");
  }

  let debugCallCount = 0;
  const wrapper = Enzyme.mount( /*#__PURE__*/React.createElement(Provider, {
    value: {
      renderStyle: () => "bar",
      renderKeyframes: () => "",
      renderFontFace: () => ""
    },
    debug: {
      debug: () => {
        debugCallCount++;
        return `__debug-${debugCallCount}`;
      }
    }
  }, /*#__PURE__*/React.createElement(Widget, null)));
  const button = wrapper.find("button");
  expect(button.hasClass("__debug-1 bar")).toBe(true);
  button.simulate("click");
  expect(button.hasClass("__debug-1 bar")).toBe(true);
  expect(debugCallCount).toBe(1);
});
test("no-op engine", () => {
  const consoleWarn = console.warn; // eslint-disable-line

  console.warn = message => {
    expect(message.split("\n")[1]).toBe("Styletron has been switched to a no-op (test) mode.");
  };

  const Widget = styled("div", {
    color: "red"
  });
  Enzyme.mount( /*#__PURE__*/React.createElement(Widget, null));
  console.warn = consoleWarn;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,