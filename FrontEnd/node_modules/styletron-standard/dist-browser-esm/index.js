export function driver(style, styletron) {
  const tx = renderDeclarativeRules(style, styletron);
  return styletron.renderStyle(tx);
}
export function getInitialStyle() {
  return {};
}
export function renderDeclarativeRules(style, styletron) {
  for (const key in style) {
    const val = style[key];

    if (key === "animationName" && typeof val !== "string") {
      style.animationName = styletron.renderKeyframes(val);
      continue;
    }

    if (key === "fontFamily" && typeof val !== "string") {
      if (Array.isArray(val)) {
        let result = "";

        for (const font of val) {
          if (typeof font === "object") {
            result += `${styletron.renderFontFace(font)},`;
          } else if (typeof font === "string") {
            result += `${font},`;
          }
        }

        style.fontFamily = result.slice(0, -1);
        continue;
      } else if (val === void 0) {
        continue;
      } else {
        style.fontFamily = styletron.renderFontFace(val);
        continue;
      }
    }

    if (typeof val === "object" && val !== null) {
      renderDeclarativeRules(val, styletron);
    }
  }

  return style;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkcml2ZXIiLCJzdHlsZSIsInN0eWxldHJvbiIsInR4IiwicmVuZGVyRGVjbGFyYXRpdmVSdWxlcyIsInJlbmRlclN0eWxlIiwiZ2V0SW5pdGlhbFN0eWxlIiwia2V5IiwidmFsIiwiYW5pbWF0aW9uTmFtZSIsInJlbmRlcktleWZyYW1lcyIsIkFycmF5IiwiaXNBcnJheSIsInJlc3VsdCIsImZvbnQiLCJyZW5kZXJGb250RmFjZSIsImZvbnRGYW1pbHkiLCJzbGljZSJdLCJzb3VyY2VzIjpbInNyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIFByb3BlcnRpZXMsXG4gIEZvbnRGYWNlIGFzIEZvbnRGYWNlT2JqZWN0LFxuICBLZXlmcmFtZXNPYmplY3QsXG59IGZyb20gXCIuL3N0eWxlLXR5cGVzXCI7XG5cbmV4cG9ydCB0eXBlIHtGb250RmFjZU9iamVjdCwgS2V5ZnJhbWVzT2JqZWN0fTtcblxuZXhwb3J0IHR5cGUgU3R5bGVPYmplY3QgPSBQcm9wZXJ0aWVzICYge1xuICBba2V5IGluIHN0cmluZ106IFByb3BlcnRpZXNba2V5b2YgUHJvcGVydGllc10gfCBTdHlsZU9iamVjdDtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhbmRhcmRFbmdpbmUge1xuICByZW5kZXJTdHlsZShzdHlsZTogU3R5bGVPYmplY3QpOiBzdHJpbmc7XG4gIHJlbmRlcktleWZyYW1lcyhrZXlmcmFtZXM6IEtleWZyYW1lc09iamVjdCk6IHN0cmluZztcbiAgcmVuZGVyRm9udEZhY2UoZm9udEZhY2U6IEZvbnRGYWNlT2JqZWN0KTogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZHJpdmVyKHN0eWxlOiBTdHlsZU9iamVjdCwgc3R5bGV0cm9uOiBTdGFuZGFyZEVuZ2luZSk6IHN0cmluZyB7XG4gIGNvbnN0IHR4ID0gcmVuZGVyRGVjbGFyYXRpdmVSdWxlcyhzdHlsZSwgc3R5bGV0cm9uKTtcbiAgcmV0dXJuIHN0eWxldHJvbi5yZW5kZXJTdHlsZSh0eCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbml0aWFsU3R5bGUoKTogU3R5bGVPYmplY3Qge1xuICByZXR1cm4ge307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJEZWNsYXJhdGl2ZVJ1bGVzKFxuICBzdHlsZTogU3R5bGVPYmplY3QsXG4gIHN0eWxldHJvbjogU3RhbmRhcmRFbmdpbmUsXG4pIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gc3R5bGUpIHtcbiAgICBjb25zdCB2YWwgPSBzdHlsZVtrZXldO1xuICAgIGlmIChrZXkgPT09IFwiYW5pbWF0aW9uTmFtZVwiICYmIHR5cGVvZiB2YWwgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHN0eWxlLmFuaW1hdGlvbk5hbWUgPSBzdHlsZXRyb24ucmVuZGVyS2V5ZnJhbWVzKHZhbCBhcyBhbnkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChrZXkgPT09IFwiZm9udEZhbWlseVwiICYmIHR5cGVvZiB2YWwgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIGZvciAoY29uc3QgZm9udCBvZiB2YWwpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGZvbnQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBgJHtzdHlsZXRyb24ucmVuZGVyRm9udEZhY2UoZm9udCBhcyBhbnkpfSxgO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGZvbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBgJHtmb250fSxgO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdHlsZS5mb250RmFtaWx5ID0gcmVzdWx0LnNsaWNlKDAsIC0xKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKHZhbCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGUuZm9udEZhbWlseSA9IHN0eWxldHJvbi5yZW5kZXJGb250RmFjZSh2YWwgYXMgYW55KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiICYmIHZhbCAhPT0gbnVsbCkge1xuICAgICAgcmVuZGVyRGVjbGFyYXRpdmVSdWxlcyh2YWwgYXMgU3R5bGVPYmplY3QsIHN0eWxldHJvbik7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBa0JBLE9BQU8sU0FBU0EsTUFBVCxDQUFnQkMsS0FBaEIsRUFBb0NDLFNBQXBDLEVBQXVFO0VBQzVFLE1BQU1DLEVBQUUsR0FBR0Msc0JBQXNCLENBQUNILEtBQUQsRUFBUUMsU0FBUixDQUFqQztFQUNBLE9BQU9BLFNBQVMsQ0FBQ0csV0FBVixDQUFzQkYsRUFBdEIsQ0FBUDtBQUNEO0FBRUQsT0FBTyxTQUFTRyxlQUFULEdBQXdDO0VBQzdDLE9BQU8sRUFBUDtBQUNEO0FBRUQsT0FBTyxTQUFTRixzQkFBVCxDQUNMSCxLQURLLEVBRUxDLFNBRkssRUFHTDtFQUNBLEtBQUssTUFBTUssR0FBWCxJQUFrQk4sS0FBbEIsRUFBeUI7SUFDdkIsTUFBTU8sR0FBRyxHQUFHUCxLQUFLLENBQUNNLEdBQUQsQ0FBakI7O0lBQ0EsSUFBSUEsR0FBRyxLQUFLLGVBQVIsSUFBMkIsT0FBT0MsR0FBUCxLQUFlLFFBQTlDLEVBQXdEO01BQ3REUCxLQUFLLENBQUNRLGFBQU4sR0FBc0JQLFNBQVMsQ0FBQ1EsZUFBVixDQUEwQkYsR0FBMUIsQ0FBdEI7TUFDQTtJQUNEOztJQUNELElBQUlELEdBQUcsS0FBSyxZQUFSLElBQXdCLE9BQU9DLEdBQVAsS0FBZSxRQUEzQyxFQUFxRDtNQUNuRCxJQUFJRyxLQUFLLENBQUNDLE9BQU4sQ0FBY0osR0FBZCxDQUFKLEVBQXdCO1FBQ3RCLElBQUlLLE1BQU0sR0FBRyxFQUFiOztRQUNBLEtBQUssTUFBTUMsSUFBWCxJQUFtQk4sR0FBbkIsRUFBd0I7VUFDdEIsSUFBSSxPQUFPTSxJQUFQLEtBQWdCLFFBQXBCLEVBQThCO1lBQzVCRCxNQUFNLElBQUssR0FBRVgsU0FBUyxDQUFDYSxjQUFWLENBQXlCRCxJQUF6QixDQUFzQyxHQUFuRDtVQUNELENBRkQsTUFFTyxJQUFJLE9BQU9BLElBQVAsS0FBZ0IsUUFBcEIsRUFBOEI7WUFDbkNELE1BQU0sSUFBSyxHQUFFQyxJQUFLLEdBQWxCO1VBQ0Q7UUFDRjs7UUFDRGIsS0FBSyxDQUFDZSxVQUFOLEdBQW1CSCxNQUFNLENBQUNJLEtBQVAsQ0FBYSxDQUFiLEVBQWdCLENBQUMsQ0FBakIsQ0FBbkI7UUFDQTtNQUNELENBWEQsTUFXTyxJQUFJVCxHQUFHLEtBQUssS0FBSyxDQUFqQixFQUFvQjtRQUN6QjtNQUNELENBRk0sTUFFQTtRQUNMUCxLQUFLLENBQUNlLFVBQU4sR0FBbUJkLFNBQVMsQ0FBQ2EsY0FBVixDQUF5QlAsR0FBekIsQ0FBbkI7UUFDQTtNQUNEO0lBQ0Y7O0lBQ0QsSUFBSSxPQUFPQSxHQUFQLEtBQWUsUUFBZixJQUEyQkEsR0FBRyxLQUFLLElBQXZDLEVBQTZDO01BQzNDSixzQkFBc0IsQ0FBQ0ksR0FBRCxFQUFxQk4sU0FBckIsQ0FBdEI7SUFDRDtFQUNGOztFQUNELE9BQU9ELEtBQVA7QUFDRCJ9