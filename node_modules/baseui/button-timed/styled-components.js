"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimerContainer = exports.BaseButtonTimed = void 0;

var _index = require("../styles/index");

var _button = require("../button");

var _util = require("../styles/util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BaseButtonTimed = (0, _index.withStyle)(_button.StyledBaseButton, function (_ref) {
  var $theme = _ref.$theme,
      $initialTime = _ref.$initialTime,
      $timeElapsed = _ref.$timeElapsed;
  var completionPercentage = $timeElapsed / $initialTime * 100;
  var timeLeft = $initialTime - $timeElapsed;
  return _objectSpread({
    position: 'relative'
  }, $initialTime > 0 ? {
    ':after': {
      animationDuration: "".concat(timeLeft, "s"),
      animationName: {
        from: {
          transform: "translateX(".concat(completionPercentage, "%)")
        },
        to: {
          transform: 'translateX(100%)'
        }
      },
      animationTimingFunction: 'linear',
      display: 'inline-block',
      content: '""',
      width: '100%',
      height: '100%',
      zIndex: '1',
      position: 'absolute',
      backgroundColor: (0, _util.hexToRgb)($theme.colors.backgroundPrimary, '0.2')
    }
  } : {});
});
exports.BaseButtonTimed = BaseButtonTimed;
BaseButtonTimed.displayName = "BaseButtonTimed";
var TimerContainer = (0, _index.styled)('span', {
  // minWidth to ensure button width stays consistent as timeRemaining changes
  minWidth: '53px'
});
exports.TimerContainer = TimerContainer;
TimerContainer.displayName = "TimerContainer";