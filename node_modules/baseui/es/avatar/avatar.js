function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverrides } from '../helpers/overrides';
import { Avatar as StyledAvatar, Initials as StyledInitials, Root as StyledRoot } from './styled-components';

function getInitials(name) {
  const words = name.split(' ');
  const initials = words.map(word => word[0]);
  return initials.slice(0, 2).join('').toUpperCase();
}

export default function Avatar({
  initials,
  name = '',
  overrides = {},
  size = 'scale1000',
  src
}) {
  const imageRef = React.useRef(null);
  const [imageLoaded, setImageLoaded] = React.useState(false);

  function handleLoad() {
    setImageLoaded(true);
  }

  function handleError() {
    setImageLoaded(false);
  }

  React.useEffect(() => {
    setImageLoaded(false);

    if (imageRef.current) {
      if (typeof src === 'string') {
        imageRef.current.src = src;
        imageRef.current.onload = handleLoad;
        imageRef.current.onerror = handleError;
      }
    }

    return () => {
      if (imageRef.current) {
        imageRef.current.onload = null;
        imageRef.current.onerror = null;
      }
    };
  }, [src]);
  const [Avatar, avatarProps] = getOverrides(overrides.Avatar, StyledAvatar);
  const [Initials, initialsProps] = getOverrides(overrides.Initials, StyledInitials);
  const [Root, rootProps] = getOverrides(overrides.Root, StyledRoot);
  return /*#__PURE__*/React.createElement(Root, _extends({
    "aria-label": imageLoaded ? null : name,
    role: imageLoaded ? null : 'img',
    $didImageFailToLoad: !imageLoaded,
    $size: size,
    "data-baseweb": "avatar"
  }, rootProps), /*#__PURE__*/React.createElement(Avatar, _extends({
    ref: imageRef,
    alt: name,
    $imageLoaded: imageLoaded,
    $size: size
  }, avatarProps)), !imageLoaded && /*#__PURE__*/React.createElement(Initials, initialsProps, initials || getInitials(name)));
}