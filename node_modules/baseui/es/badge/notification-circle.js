function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverrides } from '../helpers/overrides';
import { StyledNotificationCircle, StyledRoot, StyledPositioner } from './styled-components';
import { PLACEMENT, ROLE } from './constants';
import { getAnchorFromChildren } from './utils';

const NotificationCircle = ({
  children,
  content: contentProp,
  color,
  placement = PLACEMENT.topRight,
  horizontalOffset,
  verticalOffset,
  hidden,
  overrides = {}
}) => {
  const [NotificationCircle, NotificationCircleProps] = getOverrides(overrides.Badge, StyledNotificationCircle);
  const [Root, rootProps] = getOverrides(overrides.Root, StyledRoot);
  const [Positioner, positionerProps] = getOverrides(overrides.Positioner, StyledPositioner);
  const anchor = getAnchorFromChildren(children);

  if (process.env.NODE_ENV !== "production") {
    if (typeof contentProp === 'string') {
      console.error(`[baseui] NotificationCircle child must be number or icon, found string`);
    }

    if (placement && placement !== PLACEMENT.topLeft && placement !== PLACEMENT.topRight) {
      console.error(`[baseui] NotificationCircle must be placed topLeft or topRight, found ${placement}`);
    }
  }

  let content = contentProp;

  if (typeof content === 'number' && content > 9) {
    content = '9+';
  } // If there's no anchor, render the badge inline


  if (!anchor) {
    return /*#__PURE__*/React.createElement(NotificationCircle, _extends({
      $color: color,
      $hidden: hidden
    }, NotificationCircleProps), content);
  }

  return /*#__PURE__*/React.createElement(Root, rootProps, anchor, /*#__PURE__*/React.createElement(Positioner, _extends({
    $horizontalOffset: horizontalOffset,
    $verticalOffset: verticalOffset,
    $placement: placement,
    $role: ROLE.notificationCircle
  }, positionerProps), /*#__PURE__*/React.createElement(NotificationCircle, _extends({}, NotificationCircleProps, {
    $color: color,
    $hidden: hidden
  }), content)));
};

export default NotificationCircle;