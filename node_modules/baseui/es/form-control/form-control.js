function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverride, getOverrideProps } from '../helpers/overrides';
import { UIDConsumer } from 'react-uid';
import { Label as StyledLabel, LabelEndEnhancer as StyledLabelEndEnhancer, LabelContainer as StyledLabelContainer, Caption as StyledCaption, ControlContainer as StyledControlContainer } from './styled-components';

function chooseRenderedHint(caption, error, positive, sharedProps) {
  if (!!error && typeof error !== 'boolean') {
    return typeof error === 'function' ? error(sharedProps) : error;
  }

  if (!!positive && typeof positive !== 'boolean') {
    return typeof positive === 'function' ? positive(sharedProps) : positive;
  }

  if (caption) {
    return typeof caption === 'function' ? caption(sharedProps) : caption;
  }

  return null;
}

export default class FormControl extends React.Component {
  render() {
    const {
      overrides: {
        Label: LabelOverride,
        LabelEndEnhancer: LabelEndEnhancerOverride,
        LabelContainer: LabelContainerOverride,
        Caption: CaptionOverride,
        ControlContainer: ControlContainerOverride
      },
      label,
      caption,
      disabled,
      error,
      positive,
      htmlFor,
      children,
      counter
    } = this.props; // @ts-expect-error todo(flow->ts): looks dangerous

    const onlyChildProps = React.Children.only(children).props;
    const sharedProps = {
      $disabled: !!disabled,
      $error: !!error,
      $positive: !!positive
    };
    const Label = getOverride(LabelOverride) || StyledLabel;
    const LabelEndEnhancer = getOverride(LabelEndEnhancerOverride) || StyledLabelEndEnhancer;
    const LabelContainer = getOverride(LabelContainerOverride) || StyledLabelContainer;
    const Caption = getOverride(CaptionOverride) || StyledCaption;
    const ControlContainer = getOverride(ControlContainerOverride) || StyledControlContainer;
    const hint = chooseRenderedHint(caption, error, positive, sharedProps);

    if (process.env.NODE_ENV !== "production") {
      if (error && positive) {
        // eslint-disable-next-line no-console
        console.warn(`[FormControl] \`error\` and \`positive\` are both set to \`true\`. \`error\` will take precedence but this may not be what you want.`);
      }
    }

    let labelEndEnhancer = this.props.labelEndEnhancer;

    if (counter) {
      // inferred values are preferred but if the user specifies the value
      // that is then used as the default.
      let maxLength = null;
      let length = null;
      let counterError = null;

      if (typeof counter === 'object') {
        length = counter.length;
        maxLength = counter.maxLength;
        counterError = counter.error;
      }

      maxLength = maxLength ? maxLength : onlyChildProps.maxLength;

      if (length == null && typeof onlyChildProps.value === 'string') {
        length = onlyChildProps.value.length;
      }

      if (length == null) {
        length = 0;

        if (process.env.NODE_ENV !== "production") {
          console.warn(`[FromControl] \`length\` must either be explicitly set via \`counter\` object property, or \`value\` string property on the child component.`);
        }
      }

      sharedProps.$length = length;

      if (maxLength == null) {
        if (!labelEndEnhancer) labelEndEnhancer = `${length}`;
      } else {
        sharedProps.$maxLength = length;
        if (!labelEndEnhancer) labelEndEnhancer = `${length}/${maxLength}`;
        if (length > maxLength && counterError == null) counterError = true;
      }

      if (counterError) {
        sharedProps.$error = true;
        sharedProps.$counterError = true;
      }
    }

    return /*#__PURE__*/React.createElement(React.Fragment, null, label && /*#__PURE__*/React.createElement(LabelContainer, _extends({}, sharedProps, getOverrideProps(LabelContainerOverride)), /*#__PURE__*/React.createElement(Label, _extends({
      "data-baseweb": "form-control-label",
      htmlFor: htmlFor || onlyChildProps.id
    }, sharedProps, getOverrideProps(LabelOverride)), typeof label === 'function' ? label(sharedProps) : label), !!labelEndEnhancer && /*#__PURE__*/React.createElement(LabelEndEnhancer, _extends({}, sharedProps, getOverrideProps(LabelEndEnhancerOverride)), typeof labelEndEnhancer === 'function' ? labelEndEnhancer(sharedProps) : labelEndEnhancer)), /*#__PURE__*/React.createElement(UIDConsumer, null, captionId => /*#__PURE__*/React.createElement(ControlContainer, _extends({
      "data-baseweb": "form-control-container"
    }, sharedProps, getOverrideProps(ControlContainerOverride)), React.Children.map(children, (child, index) => {
      if (!child) return; // @ts-expect-error

      const key = child.key || String(index); // @ts-expect-error todo(flow->ts): looks dangerous -- can be possible error

      return /*#__PURE__*/React.cloneElement(child, {
        key,
        'aria-errormessage': error ? captionId : null,
        'aria-describedby': caption || positive ? captionId : null,
        disabled: onlyChildProps.disabled || disabled,
        error: typeof onlyChildProps.error !== 'undefined' ? onlyChildProps.error : sharedProps.$error,
        positive: typeof onlyChildProps.positive !== 'undefined' ? onlyChildProps.positive : sharedProps.$positive
      });
    }), (!!caption || !!error || positive) && /*#__PURE__*/React.createElement(Caption, _extends({
      "data-baseweb": "form-control-caption",
      id: captionId
    }, sharedProps, getOverrideProps(CaptionOverride)), hint))));
  }

}

_defineProperty(FormControl, "defaultProps", {
  overrides: {},
  label: null,
  caption: null,
  disabled: false,
  counter: false
});