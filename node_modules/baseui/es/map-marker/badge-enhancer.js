function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverrides } from '../helpers/overrides';
import { StyledBadgeEnhancerRoot } from './styled-components';
import { PINHEAD_TYPES, BADGE_ENHANCER_SIZES, BADGE_ENHANCER_POSITIONS, BADGE_ENHANCER_CONTENT_SIZE } from './constants';

const BadgeEnhancer = ({
  pinHeadSize,
  markerType,
  badgeEnhancerSize = BADGE_ENHANCER_SIZES.none,
  badgeEnhancerContent: BadgeEnhancerContent,
  overrides = {}
}) => {
  if (badgeEnhancerSize === null || badgeEnhancerSize == BADGE_ENHANCER_SIZES.none) {
    return null;
  }

  if (badgeEnhancerSize !== BADGE_ENHANCER_SIZES.xSmall && !BadgeEnhancerContent) {
    if (process.env.NODE_ENV !== "production") {
      console.warn(`Badges (except for size ${BADGE_ENHANCER_SIZES.xSmall}) must contain content`);
    }

    return null;
  }

  if (markerType === PINHEAD_TYPES.floating) {
    if (process.env.NODE_ENV !== "production") {
      console.warn(`Badges can only be rendered on fixed markers`);
    }

    return null;
  }

  const positions = BADGE_ENHANCER_POSITIONS[pinHeadSize];
  const position = positions ? positions[badgeEnhancerSize] : null;

  if (!position) {
    if (process.env.NODE_ENV !== "production") {
      console.warn(`Badge size ${badgeEnhancerSize} cannot be rendered with pinhead size ${pinHeadSize}`);
    }

    return null;
  }

  const [BadgeEnhancerRoot, badgeEnhancerRootProps] = getOverrides(overrides.BadgeEnhancer, StyledBadgeEnhancerRoot);
  return /*#__PURE__*/React.createElement(BadgeEnhancerRoot, _extends({
    $size: badgeEnhancerSize,
    $position: position
  }, badgeEnhancerRootProps), BadgeEnhancerContent && badgeEnhancerSize !== BADGE_ENHANCER_SIZES.xSmall && /*#__PURE__*/React.createElement(BadgeEnhancerContent, {
    size: BADGE_ENHANCER_CONTENT_SIZE[badgeEnhancerSize]
  }));
};

export default BadgeEnhancer;