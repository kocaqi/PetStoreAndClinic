function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import { styled } from '../styles';
import getDayStateCode from './utils/day-state';
import { ORIENTATION, DENSITY, INPUT_ROLE } from './constants';

/**
 * Main component container element
 */
export var StyledInputWrapper = styled('div', function (props) {
  var $separateRangeInputs = props.$separateRangeInputs;
  return _objectSpread({
    width: '100%'
  }, $separateRangeInputs ? {
    display: 'flex',
    justifyContent: 'center'
  } : {});
});
StyledInputWrapper.displayName = "StyledInputWrapper";
StyledInputWrapper.displayName = 'StyledInputWrapper';
export var StyledInputLabel = styled('div', function (_ref) {
  var $theme = _ref.$theme;
  return _objectSpread(_objectSpread({}, $theme.typography.LabelMedium), {}, {
    marginBottom: $theme.sizing.scale300
  });
});
StyledInputLabel.displayName = "StyledInputLabel";
StyledInputLabel.displayName = 'StyledInputLabel';
export var StyledStartDate = styled('div', function (_ref2) {
  var $theme = _ref2.$theme;
  return {
    width: '100%',
    marginRight: $theme.sizing.scale300
  };
});
StyledStartDate.displayName = "StyledStartDate";
StyledStartDate.displayName = 'StyledStartDate'; // eslint-disable-next-line @typescript-eslint/no-unused-vars

export var StyledEndDate = styled('div', function (_ref3) {
  var $theme = _ref3.$theme;
  return {
    width: '100%'
  };
});
StyledEndDate.displayName = "StyledEndDate";
StyledEndDate.displayName = 'StyledEndDate';
/**
 * Main component container element
 */

export var StyledRoot = styled('div', function (props) {
  var _props$$theme = props.$theme,
      typography = _props$$theme.typography,
      colors = _props$$theme.colors,
      borders = _props$$theme.borders;
  return _objectSpread(_objectSpread({}, typography.font200), {}, {
    color: colors.calendarForeground,
    backgroundColor: colors.calendarBackground,
    textAlign: 'center',
    borderTopLeftRadius: borders.surfaceBorderRadius,
    borderTopRightRadius: borders.surfaceBorderRadius,
    borderBottomRightRadius: borders.surfaceBorderRadius,
    borderBottomLeftRadius: borders.surfaceBorderRadius,
    display: 'inline-block'
  });
});
StyledRoot.displayName = "StyledRoot";
StyledRoot.displayName = 'StyledRoot';
export var StyledMonthContainer = styled('div', function (props) {
  var $orientation = props.$orientation;
  return {
    display: 'flex',
    flexDirection: $orientation === ORIENTATION.vertical ? 'column' : 'row'
  };
});
StyledMonthContainer.displayName = "StyledMonthContainer";
StyledMonthContainer.displayName = 'StyledMonthContainer';
export var StyledCalendarContainer = styled('div', function (props) {
  var sizing = props.$theme.sizing,
      $density = props.$density;
  return {
    paddingTop: sizing.scale300,
    paddingBottom: $density === DENSITY.high ? sizing.scale400 : sizing.scale300,
    paddingLeft: sizing.scale500,
    paddingRight: sizing.scale500
  };
});
StyledCalendarContainer.displayName = "StyledCalendarContainer";
StyledCalendarContainer.displayName = 'StyledCalendarContainer';
export var StyledSelectorContainer = styled('div', function (_ref4) {
  var $theme = _ref4.$theme;
  var textAlign = $theme.direction === 'rtl' ? 'right' : 'left';
  return {
    marginBottom: $theme.sizing.scale600,
    paddingLeft: $theme.sizing.scale600,
    paddingRight: $theme.sizing.scale600,
    textAlign: textAlign
  };
});
StyledSelectorContainer.displayName = "StyledSelectorContainer";
StyledSelectorContainer.displayName = 'StyledSelectorContainer';
export var StyledCalendarHeader = styled('div', function (props) {
  var _props$$theme2 = props.$theme,
      typography = _props$$theme2.typography,
      borders = _props$$theme2.borders,
      colors = _props$$theme2.colors,
      sizing = _props$$theme2.sizing,
      $density = props.$density;
  return _objectSpread(_objectSpread({}, $density === DENSITY.high ? typography.LabelMedium : typography.LabelLarge), {}, {
    color: colors.calendarHeaderForeground,
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingTop: sizing.scale600,
    paddingBottom: sizing.scale300,
    paddingLeft: sizing.scale600,
    paddingRight: sizing.scale600,
    backgroundColor: colors.calendarHeaderBackground,
    borderTopLeftRadius: borders.surfaceBorderRadius,
    borderTopRightRadius: borders.surfaceBorderRadius,
    borderBottomRightRadius: 0,
    borderBottomLeftRadius: 0,
    // account for the left/right arrow heights
    minHeight: $density === DENSITY.high ? "calc(".concat(sizing.scale800, " + ").concat(sizing.scale0, ")") : sizing.scale950
  });
});
StyledCalendarHeader.displayName = "StyledCalendarHeader";
StyledCalendarHeader.displayName = 'StyledCalendarHeader';
export var StyledMonthHeader = styled('div', function (props) {
  return {
    color: props.$theme.colors.calendarHeaderForeground,
    backgroundColor: props.$theme.colors.calendarHeaderBackground,
    whiteSpace: 'nowrap'
  };
});
StyledMonthHeader.displayName = "StyledMonthHeader";
StyledMonthHeader.displayName = 'StyledMonthHeader';
export var StyledMonthYearSelectButton = styled('button', function (props) {
  var _props$$theme3 = props.$theme,
      typography = _props$$theme3.typography,
      colors = _props$$theme3.colors,
      $isFocusVisible = props.$isFocusVisible,
      $density = props.$density;
  return _objectSpread(_objectSpread({}, $density === DENSITY.high ? typography.LabelMedium : typography.LabelLarge), {}, {
    alignItems: 'center',
    backgroundColor: 'transparent',
    borderLeftWidth: 0,
    borderRightWidth: 0,
    borderTopWidth: 0,
    borderBottomWidth: 0,
    color: colors.calendarHeaderForeground,
    cursor: 'pointer',
    display: 'flex',
    outline: 'none',
    ':focus': {
      boxShadow: $isFocusVisible ? "0 0 0 3px ".concat(colors.accent) : 'none'
    }
  });
});
StyledMonthYearSelectButton.displayName = "StyledMonthYearSelectButton";
StyledMonthYearSelectButton.displayName = 'StyledMonthYearSelectButton';
export var StyledMonthYearSelectIconContainer = styled('span', function (props) {
  var marginDirection = props.$theme.direction === 'rtl' ? 'marginRight' : 'marginLeft';
  return _defineProperty({
    alignItems: 'center',
    display: 'flex'
  }, marginDirection, props.$theme.sizing.scale500);
});
StyledMonthYearSelectIconContainer.displayName = "StyledMonthYearSelectIconContainer";
StyledMonthYearSelectIconContainer.displayName = 'StyledMonthYearSelectIconContainer';

function getArrowBtnStyle(_ref6) {
  var $theme = _ref6.$theme,
      $disabled = _ref6.$disabled,
      $isFocusVisible = _ref6.$isFocusVisible;
  return {
    boxSizing: 'border-box',
    display: 'flex',
    color: $disabled ? $theme.colors.calendarHeaderForegroundDisabled : $theme.colors.calendarHeaderForeground,
    cursor: $disabled ? 'default' : 'pointer',
    backgroundColor: 'transparent',
    borderLeftWidth: 0,
    borderRightWidth: 0,
    borderTopWidth: 0,
    borderBottomWidth: 0,
    paddingTop: '0',
    paddingBottom: '0',
    paddingLeft: '0',
    paddingRight: '0',
    marginBottom: 0,
    marginTop: 0,
    outline: 'none',
    ':focus': $disabled ? {} : {
      boxShadow: $isFocusVisible ? "0 0 0 3px ".concat($theme.colors.accent) : 'none'
    }
  };
}

export var StyledPrevButton = styled('button', getArrowBtnStyle);
StyledPrevButton.displayName = "StyledPrevButton";
StyledPrevButton.displayName = 'StyledPrevButton';
export var StyledNextButton = styled('button', getArrowBtnStyle);
StyledNextButton.displayName = "StyledNextButton";
StyledNextButton.displayName = 'StyledNextButton'; // eslint-disable-next-line @typescript-eslint/no-unused-vars

export var StyledMonth = styled('div', function (props) {
  return {
    display: 'inline-block'
  };
});
StyledMonth.displayName = "StyledMonth";
StyledMonth.displayName = 'StyledMonth';
export var StyledWeek = styled('div', function (props) {
  var sizing = props.$theme.sizing;
  return {
    whiteSpace: 'nowrap',
    display: 'flex',
    marginBottom: sizing.scale0
  };
});
StyledWeek.displayName = "StyledWeek";
StyledWeek.displayName = 'StyledWeek';

function generateDayStyles(defaultCode, defaultStyle) {
  var _ref7;

  var codeForSM = defaultCode.substr(0, 12) + '1' + defaultCode.substr(12 + 1);
  var codeForEM = defaultCode.substr(0, 13) + '1' + defaultCode.substr(13 + 1);
  return _ref7 = {}, _defineProperty(_ref7, defaultCode, defaultStyle), _defineProperty(_ref7, codeForSM, defaultStyle), _defineProperty(_ref7, codeForEM, defaultStyle), _ref7;
} // eslint-disable-next-line @typescript-eslint/no-explicit-any


function getDayStyles(code, _ref8) {
  var colors = _ref8.colors;
  var undefinedDayStyle = {
    ':before': {
      content: null
    },
    ':after': {
      content: null
    }
  };
  var defaultDayStyle = undefinedDayStyle;
  var disabledDateStyle = {
    color: colors.calendarForegroundDisabled,
    ':before': {
      content: null
    },
    ':after': {
      content: null
    }
  };
  var outsideMonthDateStyle = {
    color: colors.calendarForegroundDisabled,
    ':before': {
      borderTopStyle: 'none',
      borderBottomStyle: 'none',
      borderLeftStyle: 'none',
      borderRightStyle: 'none',
      backgroundColor: 'transparent'
    },
    ':after': {
      borderTopLeftRadius: '0%',
      borderTopRightRadius: '0%',
      borderBottomLeftRadius: '0%',
      borderBottomRightRadius: '0%',
      borderTopColor: 'transparent',
      borderBottomColor: 'transparent',
      borderRightColor: 'transparent',
      borderLeftColor: 'transparent'
    }
  };
  var highlightedStyle = {
    ':before': {
      content: null
    }
  };
  var CODE_DISABLED_INDEX = 1;

  if (code && code[CODE_DISABLED_INDEX] === '1') {
    defaultDayStyle = disabledDateStyle;
  } // See the ./utils/day-state.js file for the description of all available states
  // rdhsrSsDeDpSrHpHrRrLsMeMoM
  // '000000000000000'


  var dayStateStyle = Object.assign({}, // highlighted date
  generateDayStyles('001000000000000', {
    color: colors.calendarDayForegroundPseudoSelected
  }), // selected date
  generateDayStyles('000100000000000', {
    color: colors.calendarDayForegroundSelected
  }), // selected highlighted date
  generateDayStyles('001100000000000', {
    color: colors.calendarDayForegroundSelectedHighlighted
  }), // disabled date
  {
    '010000000000000': {
      color: colors.calendarForegroundDisabled,
      ':after': {
        content: null
      }
    }
  }, // disabled highlighted date
  {
    '011000000000000': {
      color: colors.calendarForegroundDisabled,
      ':after': {
        content: null
      }
    }
  }, // date outside of the currently displayed month (when peekNextMonth is true)
  generateDayStyles('000000000000001', outsideMonthDateStyle), // Range Datepicker
  // range: highlighted date outside of a selected range
  generateDayStyles('101000000000000', highlightedStyle), generateDayStyles('101010000000000', highlightedStyle), // range: selected date
  generateDayStyles('100100000000000', {
    color: colors.calendarDayForegroundSelected
  }), // range: selected highlighted date
  // when single date selected in a range
  generateDayStyles('101100000000000', {
    color: colors.calendarDayForegroundSelectedHighlighted,
    ':before': {
      content: null
    }
  }), // range: selected start and end dates are the same
  generateDayStyles('100111100000000', {
    color: colors.calendarDayForegroundSelected,
    ':before': {
      content: null
    }
  }), generateDayStyles('101111100000000', {
    color: colors.calendarDayForegroundSelectedHighlighted,
    ':before': {
      content: null
    }
  }), // range: selected start date
  generateDayStyles('100111000000000', {
    color: colors.calendarDayForegroundSelected
  }), // range: selected end date
  generateDayStyles('100110100000000', {
    color: colors.calendarDayForegroundSelected,
    ':before': {
      left: null,
      right: '50%'
    }
  }), // range: first selected date while a range is highlighted but no second date selected yet
  // highlighted range on the right from the selected
  generateDayStyles('100100001010000', {
    color: colors.calendarDayForegroundSelected
  }), // highlighted range on the left from the selected
  generateDayStyles('100100001001000', {
    color: colors.calendarDayForegroundSelected,
    ':before': {
      left: null,
      right: '50%'
    }
  }), // range: second date in a range that is highlighted but not selected
  generateDayStyles('101000001010000', {
    ':before': {
      left: null,
      right: '50%'
    }
  }), {
    '101000001001000': {}
  }, {
    '101000001001100': {}
  }, {
    '101000001001010': {}
  }, // range: pseudo-selected date
  generateDayStyles('100010010000000', {
    color: colors.calendarDayForegroundPseudoSelected,
    ':before': {
      left: '0',
      width: '100%'
    },
    ':after': {
      content: null
    }
  }), // range: pseudo-highlighted date (in a range where only one date is
  // selected and second date is highlighted)
  {
    '101000001100000': {
      color: colors.calendarDayForegroundPseudoSelected,
      ':before': {
        left: '0',
        width: '100%'
      },
      ':after': {
        content: null
      }
    }
  }, generateDayStyles('100000001100000', {
    color: colors.calendarDayForegroundPseudoSelected,
    ':before': {
      left: '0',
      width: '100%'
    },
    ':after': {
      content: null
    }
  }), // highlighted start date in a range
  generateDayStyles('101111000000000', {
    color: colors.calendarDayForegroundSelectedHighlighted
  }), // highlighted end date in a range
  generateDayStyles('101110100000000', {
    color: colors.calendarDayForegroundSelectedHighlighted,
    ':before': {
      left: null,
      right: '50%'
    }
  }), // range: pseudo-selected date
  generateDayStyles('101010010000000', {
    color: colors.calendarDayForegroundPseudoSelectedHighlighted,
    ':before': {
      left: '0',
      width: '100%'
    }
  }), // Range is true Date outside current month (when peekNextMonth is true)
  generateDayStyles('100000000000001', outsideMonthDateStyle), // peekNextMonth is true, date is outside month, start date is selected and range is highlighted is on right
  generateDayStyles('100000001010001', outsideMonthDateStyle), // peekNextMonth is true, date is outside month, start date is selected and range is highlighted is on left
  generateDayStyles('100000001001001', outsideMonthDateStyle), // peekNextMonth is true, date is outside month, range is selected
  generateDayStyles('100010000000001', outsideMonthDateStyle));
  return dayStateStyle[code] || defaultDayStyle;
}

export var StyledDay = styled('div', function (props) {
  var $disabled = props.$disabled,
      $isFocusVisible = props.$isFocusVisible,
      $isHighlighted = props.$isHighlighted,
      $peekNextMonth = props.$peekNextMonth,
      $pseudoSelected = props.$pseudoSelected,
      $range = props.$range,
      $selected = props.$selected,
      $outsideMonth = props.$outsideMonth,
      $outsideMonthWithinRange = props.$outsideMonthWithinRange,
      $hasDateLabel = props.$hasDateLabel,
      $density = props.$density,
      $hasLockedBehavior = props.$hasLockedBehavior,
      $selectedInput = props.$selectedInput,
      $value = props.$value,
      _props$$theme4 = props.$theme,
      colors = _props$$theme4.colors,
      typography = _props$$theme4.typography,
      sizing = _props$$theme4.sizing;
  var code = getDayStateCode(props);
  var height;

  if ($hasDateLabel) {
    if ($density === DENSITY.high) {
      height = '60px';
    } else {
      height = '70px';
    }
  } else {
    if ($density === DENSITY.high) {
      height = '40px';
    } else {
      height = '48px';
    }
  }

  var _ref9 = Array.isArray($value) ? $value : [$value, null],
      _ref10 = _slicedToArray(_ref9, 2),
      startDate = _ref10[0],
      endDate = _ref10[1];

  var oppositeInputIsPopulated = $selectedInput === INPUT_ROLE.startDate ? endDate !== null && typeof endDate !== 'undefined' : startDate !== null && typeof startDate !== 'undefined';
  var shouldHighlightRange = $range && !($hasLockedBehavior && !oppositeInputIsPopulated);
  return _objectSpread(_objectSpread(_objectSpread({}, $density === DENSITY.high ? typography.ParagraphSmall : typography.ParagraphMedium), {}, {
    boxSizing: 'border-box',
    position: 'relative',
    cursor: $disabled || !$peekNextMonth && $outsideMonth ? 'default' : 'pointer',
    color: colors.calendarForeground,
    display: 'inline-block',
    width: $density === DENSITY.high ? '42px' : '50px',
    height: height,
    // setting lineHeight equal to the contents height to vertically center the text
    lineHeight: $density === DENSITY.high ? sizing.scale700 : sizing.scale900,
    textAlign: 'center',
    paddingTop: sizing.scale300,
    paddingBottom: sizing.scale300,
    paddingLeft: sizing.scale300,
    paddingRight: sizing.scale300,
    marginTop: 0,
    marginBottom: 0,
    marginLeft: 0,
    marginRight: 0,
    outline: 'none',
    backgroundColor: 'transparent',
    // `transform` creates a stacking context so
    // a z-index used on its' children doesn't
    // interfere with anything outside the component
    transform: 'scale(1)'
  }, getDayStyles(code, props.$theme)), {}, {
    // :after pseudo element defines the selected
    // or highlighted day's circle styles
    ':after': _objectSpread(_objectSpread({
      zIndex: -1,
      content: '""',
      boxSizing: 'border-box',
      display: 'inline-block',
      boxShadow: $isFocusVisible && (!$outsideMonth || $peekNextMonth) ? "0 0 0 3px ".concat(colors.accent) : 'none',
      backgroundColor: $selected ? colors.calendarDayBackgroundSelectedHighlighted : $pseudoSelected && $isHighlighted ? colors.calendarDayBackgroundPseudoSelectedHighlighted : colors.calendarBackground,
      height: $hasDateLabel ? '100%' : $density === DENSITY.high ? '42px' : '50px',
      width: '100%',
      position: 'absolute',
      top: $hasDateLabel ? 0 : '-1px',
      left: 0,
      paddingTop: sizing.scale200,
      paddingBottom: sizing.scale200,
      borderLeftWidth: '2px',
      borderRightWidth: '2px',
      borderTopWidth: '2px',
      borderBottomWidth: '2px',
      borderLeftStyle: 'solid',
      borderRightStyle: 'solid',
      borderTopStyle: 'solid',
      borderBottomStyle: 'solid',
      borderTopColor: colors.borderSelected,
      borderBottomColor: colors.borderSelected,
      borderRightColor: colors.borderSelected,
      borderLeftColor: colors.borderSelected,
      borderTopLeftRadius: $hasDateLabel ? sizing.scale800 : '100%',
      borderTopRightRadius: $hasDateLabel ? sizing.scale800 : '100%',
      borderBottomLeftRadius: $hasDateLabel ? sizing.scale800 : '100%',
      borderBottomRightRadius: $hasDateLabel ? sizing.scale800 : '100%'
    }, getDayStyles(code, props.$theme)[':after'] || {}), $outsideMonthWithinRange ? {
      content: null
    } : {})
  }, shouldHighlightRange ? {
    // :before pseudo element defines a grey background style that extends
    // the selected/highlighted day's circle and spans through a range
    ':before': _objectSpread(_objectSpread({
      zIndex: -1,
      content: '""',
      boxSizing: 'border-box',
      display: 'inline-block',
      backgroundColor: colors.mono300,
      position: 'absolute',
      height: '100%',
      width: '50%',
      top: 0,
      left: '50%',
      borderTopWidth: '2px',
      borderBottomWidth: '2px',
      borderLeftWidth: '0',
      borderRightWidth: '0',
      borderTopStyle: 'solid',
      borderBottomStyle: 'solid',
      borderLeftStyle: 'solid',
      borderRightStyle: 'solid',
      borderTopColor: 'transparent',
      borderBottomColor: 'transparent',
      borderLeftColor: 'transparent',
      borderRightColor: 'transparent'
    }, getDayStyles(code, props.$theme)[':before'] || {}), $outsideMonthWithinRange ? {
      backgroundColor: colors.mono300,
      left: '0',
      width: '100%',
      content: '""'
    } : {})
  } : // a hack to make flow happy, otherwise it complains about complexity
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  {});
});
StyledDay.displayName = "StyledDay";
StyledDay.displayName = 'StyledDay';
export var StyledDayLabel = styled('div', function (props) {
  var _props$$theme5 = props.$theme,
      typography = _props$$theme5.typography,
      colors = _props$$theme5.colors,
      $selected = props.$selected;
  return _objectSpread(_objectSpread({}, typography.ParagraphXSmall), {}, {
    color: $selected ? colors.contentInverseTertiary : colors.contentTertiary
  });
});
StyledDayLabel.displayName = "StyledDayLabel";
StyledDayLabel.displayName = 'StyledDayLabel';
export var StyledWeekdayHeader = styled('div', function (props) {
  var _props$$theme6 = props.$theme,
      typography = _props$$theme6.typography,
      colors = _props$$theme6.colors,
      sizing = _props$$theme6.sizing,
      $density = props.$density;
  return _objectSpread(_objectSpread({}, typography.LabelMedium), {}, {
    color: colors.contentTertiary,
    boxSizing: 'border-box',
    position: 'relative',
    cursor: 'default',
    display: 'inline-block',
    width: $density === DENSITY.high ? '42px' : '50px',
    height: $density === DENSITY.high ? '40px' : '48px',
    textAlign: 'center',
    // setting lineHeight equal to the contents height to vertically center the text
    lineHeight: sizing.scale900,
    paddingTop: sizing.scale300,
    paddingBottom: sizing.scale300,
    paddingLeft: sizing.scale200,
    paddingRight: sizing.scale200,
    marginTop: 0,
    marginBottom: 0,
    marginLeft: 0,
    marginRight: 0,
    backgroundColor: 'transparent'
  });
});
StyledWeekdayHeader.displayName = "StyledWeekdayHeader";
StyledWeekdayHeader.displayName = 'StyledWeekdayHeader';