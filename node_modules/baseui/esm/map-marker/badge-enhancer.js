function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverrides } from '../helpers/overrides';
import { StyledBadgeEnhancerRoot } from './styled-components';
import { PINHEAD_TYPES, BADGE_ENHANCER_SIZES, BADGE_ENHANCER_POSITIONS, BADGE_ENHANCER_CONTENT_SIZE } from './constants';

var BadgeEnhancer = function BadgeEnhancer(_ref) {
  var pinHeadSize = _ref.pinHeadSize,
      markerType = _ref.markerType,
      _ref$badgeEnhancerSiz = _ref.badgeEnhancerSize,
      badgeEnhancerSize = _ref$badgeEnhancerSiz === void 0 ? BADGE_ENHANCER_SIZES.none : _ref$badgeEnhancerSiz,
      BadgeEnhancerContent = _ref.badgeEnhancerContent,
      _ref$overrides = _ref.overrides,
      overrides = _ref$overrides === void 0 ? {} : _ref$overrides;

  if (badgeEnhancerSize === null || badgeEnhancerSize == BADGE_ENHANCER_SIZES.none) {
    return null;
  }

  if (badgeEnhancerSize !== BADGE_ENHANCER_SIZES.xSmall && !BadgeEnhancerContent) {
    if (process.env.NODE_ENV !== "production") {
      console.warn("Badges (except for size ".concat(BADGE_ENHANCER_SIZES.xSmall, ") must contain content"));
    }

    return null;
  }

  if (markerType === PINHEAD_TYPES.floating) {
    if (process.env.NODE_ENV !== "production") {
      console.warn("Badges can only be rendered on fixed markers");
    }

    return null;
  }

  var positions = BADGE_ENHANCER_POSITIONS[pinHeadSize];
  var position = positions ? positions[badgeEnhancerSize] : null;

  if (!position) {
    if (process.env.NODE_ENV !== "production") {
      console.warn("Badge size ".concat(badgeEnhancerSize, " cannot be rendered with pinhead size ").concat(pinHeadSize));
    }

    return null;
  }

  var _getOverrides = getOverrides(overrides.BadgeEnhancer, StyledBadgeEnhancerRoot),
      _getOverrides2 = _slicedToArray(_getOverrides, 2),
      BadgeEnhancerRoot = _getOverrides2[0],
      badgeEnhancerRootProps = _getOverrides2[1];

  return /*#__PURE__*/React.createElement(BadgeEnhancerRoot, _extends({
    $size: badgeEnhancerSize,
    $position: position
  }, badgeEnhancerRootProps), BadgeEnhancerContent && badgeEnhancerSize !== BADGE_ENHANCER_SIZES.xSmall && /*#__PURE__*/React.createElement(BadgeEnhancerContent, {
    size: BADGE_ENHANCER_CONTENT_SIZE[badgeEnhancerSize]
  }));
};

export default BadgeEnhancer;