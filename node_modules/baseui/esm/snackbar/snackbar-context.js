var _excluded = ["PlacementContainer"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { Layer } from '../layer';
import { getOverrides } from '../helpers/overrides';
import { useStyletron } from '../styles';
import { DURATION, PLACEMENT } from './constants';
import SnackbarElement from './snackbar-element';
import { StyledPlacementContainer } from './styled-components';

function fallbackHandler() {
  if (process.env.NODE_ENV !== "production") {
    console.warn('Snackbar context not found.');
  }
}

export var SnackbarContext = /*#__PURE__*/React.createContext({
  enqueue: fallbackHandler,
  dequeue: fallbackHandler
});
export function useSnackbar() {
  var context = React.useContext(SnackbarContext);
  return {
    enqueue: context.enqueue,
    dequeue: context.dequeue
  };
}

function usePrevious(value) {
  var ref = React.useRef();
  React.useEffect(function () {
    ref.current = value;
  });
  return ref.current;
}

export default function SnackbarProvider(_ref) {
  var children = _ref.children,
      _ref$overrides = _ref.overrides,
      overrides = _ref$overrides === void 0 ? {} : _ref$overrides,
      placement = _ref.placement,
      _ref$defaultDuration = _ref.defaultDuration,
      defaultDuration = _ref$defaultDuration === void 0 ? DURATION.short : _ref$defaultDuration;

  var _useStyletron = useStyletron(),
      _useStyletron2 = _slicedToArray(_useStyletron, 1),
      css = _useStyletron2[0];

  var _React$useState = React.useState([]),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      snackbars = _React$useState2[0],
      setSnackbars = _React$useState2[1];

  var _React$useState3 = React.useState(false),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      animating = _React$useState4[0],
      setAnimating = _React$useState4[1];

  var timeoutRef = React.useRef(null);

  var _React$useState5 = React.useState(0),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      containerHeight = _React$useState6[0],
      setContainerHeight = _React$useState6[1];

  var containerRef = React.useRef(null);

  function enqueue(elementProps) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDuration;
    setSnackbars(function (prev) {
      return [].concat(_toConsumableArray(prev), [{
        elementProps: elementProps,
        duration: duration
      }]);
    });
  }

  var prevSnackbars = usePrevious(snackbars) || [];
  React.useEffect(function () {
    if (prevSnackbars.length === 0 && snackbars.length >= 1) {
      enter(snackbars[0].duration);
    }
  }, [snackbars, prevSnackbars]);

  function dequeue() {
    setContainerHeight(0);
    setSnackbars(function (prev) {
      var next = prev.slice(1);

      if (next.length > 0) {
        enter(next[0].duration);
      }

      return next;
    });
  }

  function enter(duration) {
    setAnimating(true);
    setTimeout(function () {
      setAnimating(false);
      display(duration);
    }, 0);
  }

  function exit() {
    setAnimating(true);
    setTimeout(function () {
      setAnimating(false);
      dequeue();
    }, 1000);
  }

  function display(duration) {
    if (duration === DURATION.infinite) {
      return;
    }

    timeoutRef.current = setTimeout(function () {
      exit();
    }, duration);
  }

  function handleMouseEnter() {
    clearTimeout(timeoutRef.current);
  }

  function handleMouseLeave(duration) {
    display(duration);
  }

  function handleActionClick() {
    clearTimeout(timeoutRef.current);
    exit();
  }

  React.useEffect(function () {
    if (typeof document !== 'undefined') {
      if (window.ResizeObserver) {
        var observer = new window.ResizeObserver(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 1),
              entry = _ref3[0];

          return setContainerHeight(entry.contentRect.height);
        });

        if (containerRef.current) {
          observer.observe(containerRef.current);
        }

        return function () {
          return observer.disconnect();
        };
      }
    }
  }, [snackbars.length, animating]);
  var translateHeight = React.useMemo(function () {
    var value = containerHeight * 2 + 24;

    if (!placement || placement === PLACEMENT.top || placement === PLACEMENT.topLeft || placement === PLACEMENT.topRight) {
      return -1 * value;
    }

    return value;
  }, [placement, containerHeight]);

  var PlacementContainerOverrides = overrides.PlacementContainer,
      snackbarOverrides = _objectWithoutProperties(overrides, _excluded);

  var _getOverrides = getOverrides(PlacementContainerOverrides, StyledPlacementContainer),
      _getOverrides2 = _slicedToArray(_getOverrides, 2),
      PlacementContainer = _getOverrides2[0],
      placementContainerProps = _getOverrides2[1];

  return /*#__PURE__*/React.createElement(SnackbarContext.Provider, {
    value: {
      enqueue: enqueue,
      dequeue: exit
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: css({
      boxSizing: 'border-box',
      position: 'absolute',
      top: '-10000px',
      left: '-10000px'
    }),
    ref: containerRef
  }, snackbars[0] && /*#__PURE__*/React.createElement(SnackbarElement, _extends({}, snackbars[0].elementProps, {
    overrides: _objectSpread(_objectSpread({}, snackbarOverrides), snackbars[0].elementProps.overrides),
    focus: false
  }))), snackbars.length > 0 && containerHeight !== 0 && /*#__PURE__*/React.createElement(Layer, null, /*#__PURE__*/React.createElement(PlacementContainer, _extends({
    $animating: animating,
    $placement: placement,
    $translateHeight: translateHeight
  }, placementContainerProps), /*#__PURE__*/React.createElement("div", {
    role: "alert",
    onMouseEnter: handleMouseEnter,
    onMouseLeave: function onMouseLeave() {
      return handleMouseLeave(snackbars[0].duration);
    },
    className: css({
      display: 'inline',
      pointerEvents: 'all'
    })
  }, /*#__PURE__*/React.createElement(SnackbarElement, _extends({}, snackbars[0].elementProps, {
    actionOnClick: function actionOnClick(event) {
      if (snackbars[0].elementProps.actionOnClick) {
        snackbars[0].elementProps.actionOnClick(event);
      }

      handleActionClick();
    },
    overrides: _objectSpread(_objectSpread({}, snackbarOverrides), snackbars[0].elementProps.overrides)
  }))))), children);
}