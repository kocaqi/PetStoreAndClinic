"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _overrides = require("../helpers/overrides");

var _reactUid = require("react-uid");

var _styledComponents = require("./styled-components");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function chooseRenderedHint(caption, error, positive, sharedProps) {
  if (!!error && typeof error !== 'boolean') {
    return typeof error === 'function' ? error(sharedProps) : error;
  }

  if (!!positive && typeof positive !== 'boolean') {
    return typeof positive === 'function' ? positive(sharedProps) : positive;
  }

  if (caption) {
    return typeof caption === 'function' ? caption(sharedProps) : caption;
  }

  return null;
}

var FormControl = /*#__PURE__*/function (_React$Component) {
  _inherits(FormControl, _React$Component);

  var _super = _createSuper(FormControl);

  function FormControl() {
    _classCallCheck(this, FormControl);

    return _super.apply(this, arguments);
  }

  _createClass(FormControl, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _this$props$overrides = _this$props.overrides,
          LabelOverride = _this$props$overrides.Label,
          LabelEndEnhancerOverride = _this$props$overrides.LabelEndEnhancer,
          LabelContainerOverride = _this$props$overrides.LabelContainer,
          CaptionOverride = _this$props$overrides.Caption,
          ControlContainerOverride = _this$props$overrides.ControlContainer,
          label = _this$props.label,
          caption = _this$props.caption,
          disabled = _this$props.disabled,
          error = _this$props.error,
          positive = _this$props.positive,
          htmlFor = _this$props.htmlFor,
          children = _this$props.children,
          counter = _this$props.counter; // @ts-expect-error todo(flow->ts): looks dangerous

      var onlyChildProps = React.Children.only(children).props;
      var sharedProps = {
        $disabled: !!disabled,
        $error: !!error,
        $positive: !!positive
      };

      var Label = (0, _overrides.getOverride)(LabelOverride) || _styledComponents.Label;

      var LabelEndEnhancer = (0, _overrides.getOverride)(LabelEndEnhancerOverride) || _styledComponents.LabelEndEnhancer;

      var LabelContainer = (0, _overrides.getOverride)(LabelContainerOverride) || _styledComponents.LabelContainer;

      var Caption = (0, _overrides.getOverride)(CaptionOverride) || _styledComponents.Caption;

      var ControlContainer = (0, _overrides.getOverride)(ControlContainerOverride) || _styledComponents.ControlContainer;

      var hint = chooseRenderedHint(caption, error, positive, sharedProps);

      if (process.env.NODE_ENV !== "production") {
        if (error && positive) {
          // eslint-disable-next-line no-console
          console.warn("[FormControl] `error` and `positive` are both set to `true`. `error` will take precedence but this may not be what you want.");
        }
      }

      var labelEndEnhancer = this.props.labelEndEnhancer;

      if (counter) {
        // inferred values are preferred but if the user specifies the value
        // that is then used as the default.
        var maxLength = null;
        var length = null;
        var counterError = null;

        if (_typeof(counter) === 'object') {
          length = counter.length;
          maxLength = counter.maxLength;
          counterError = counter.error;
        }

        maxLength = maxLength ? maxLength : onlyChildProps.maxLength;

        if (length == null && typeof onlyChildProps.value === 'string') {
          length = onlyChildProps.value.length;
        }

        if (length == null) {
          length = 0;

          if (process.env.NODE_ENV !== "production") {
            console.warn("[FromControl] `length` must either be explicitly set via `counter` object property, or `value` string property on the child component.");
          }
        }

        sharedProps.$length = length;

        if (maxLength == null) {
          if (!labelEndEnhancer) labelEndEnhancer = "".concat(length);
        } else {
          sharedProps.$maxLength = length;
          if (!labelEndEnhancer) labelEndEnhancer = "".concat(length, "/").concat(maxLength);
          if (length > maxLength && counterError == null) counterError = true;
        }

        if (counterError) {
          sharedProps.$error = true;
          sharedProps.$counterError = true;
        }
      }

      return /*#__PURE__*/React.createElement(React.Fragment, null, label && /*#__PURE__*/React.createElement(LabelContainer, _extends({}, sharedProps, (0, _overrides.getOverrideProps)(LabelContainerOverride)), /*#__PURE__*/React.createElement(Label, _extends({
        "data-baseweb": "form-control-label",
        htmlFor: htmlFor || onlyChildProps.id
      }, sharedProps, (0, _overrides.getOverrideProps)(LabelOverride)), typeof label === 'function' ? label(sharedProps) : label), !!labelEndEnhancer && /*#__PURE__*/React.createElement(LabelEndEnhancer, _extends({}, sharedProps, (0, _overrides.getOverrideProps)(LabelEndEnhancerOverride)), typeof labelEndEnhancer === 'function' ? labelEndEnhancer(sharedProps) : labelEndEnhancer)), /*#__PURE__*/React.createElement(_reactUid.UIDConsumer, null, function (captionId) {
        return /*#__PURE__*/React.createElement(ControlContainer, _extends({
          "data-baseweb": "form-control-container"
        }, sharedProps, (0, _overrides.getOverrideProps)(ControlContainerOverride)), React.Children.map(children, function (child, index) {
          if (!child) return; // @ts-expect-error

          var key = child.key || String(index); // @ts-expect-error todo(flow->ts): looks dangerous -- can be possible error

          return /*#__PURE__*/React.cloneElement(child, {
            key: key,
            'aria-errormessage': error ? captionId : null,
            'aria-describedby': caption || positive ? captionId : null,
            disabled: onlyChildProps.disabled || disabled,
            error: typeof onlyChildProps.error !== 'undefined' ? onlyChildProps.error : sharedProps.$error,
            positive: typeof onlyChildProps.positive !== 'undefined' ? onlyChildProps.positive : sharedProps.$positive
          });
        }), (!!caption || !!error || positive) && /*#__PURE__*/React.createElement(Caption, _extends({
          "data-baseweb": "form-control-caption",
          id: captionId
        }, sharedProps, (0, _overrides.getOverrideProps)(CaptionOverride)), hint));
      }));
    }
  }]);

  return FormControl;
}(React.Component);

exports.default = FormControl;

_defineProperty(FormControl, "defaultProps", {
  overrides: {},
  label: null,
  caption: null,
  disabled: false,
  counter: false
});