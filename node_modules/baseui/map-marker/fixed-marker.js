"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styles = require("../styles");

var _overrides = require("../helpers/overrides");

var _constants = require("./constants");

var _pinHead = _interopRequireDefault(require("./pin-head"));

var _needle = _interopRequireDefault(require("./needle"));

var _dragShadow = _interopRequireDefault(require("./drag-shadow"));

var _styledComponents = require("./styled-components");

var _excluded = ["size", "needle", "label", "startEnhancer", "endEnhancer", "kind", "dragging", "overrides", "labelEnhancerContent", "labelEnhancerPosition", "badgeEnhancerSize", "badgeEnhancerContent"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function getColors(kind, theme) {
  if (kind === _constants.KIND.accent) {
    return {
      color: theme.colors.contentInversePrimary,
      backgroundColor: theme.colors.backgroundAccent
    };
  }

  if (kind === _constants.KIND.negative) {
    return {
      color: theme.colors.contentInversePrimary,
      backgroundColor: theme.colors.backgroundNegative
    };
  }

  return {
    color: theme.colors.contentInversePrimary,
    backgroundColor: theme.colors.backgroundInversePrimary
  };
}

var FixedMarker = function FixedMarker(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? _constants.PINHEAD_SIZES_SHAPES.medium : _ref$size,
      _ref$needle = _ref.needle,
      needle = _ref$needle === void 0 ? _constants.NEEDLE_SIZES.medium : _ref$needle,
      label = _ref.label,
      startEnhancer = _ref.startEnhancer,
      endEnhancer = _ref.endEnhancer,
      _ref$kind = _ref.kind,
      kind = _ref$kind === void 0 ? _constants.KIND.default : _ref$kind,
      _ref$dragging = _ref.dragging,
      dragging = _ref$dragging === void 0 ? false : _ref$dragging,
      _ref$overrides = _ref.overrides,
      overrides = _ref$overrides === void 0 ? {} : _ref$overrides,
      _ref$labelEnhancerCon = _ref.labelEnhancerContent,
      labelEnhancerContent = _ref$labelEnhancerCon === void 0 ? null : _ref$labelEnhancerCon,
      _ref$labelEnhancerPos = _ref.labelEnhancerPosition,
      labelEnhancerPosition = _ref$labelEnhancerPos === void 0 ? _constants.LABEL_ENHANCER_POSITIONS.bottom : _ref$labelEnhancerPos,
      _ref$badgeEnhancerSiz = _ref.badgeEnhancerSize,
      badgeEnhancerSize = _ref$badgeEnhancerSiz === void 0 ? null : _ref$badgeEnhancerSiz,
      _ref$badgeEnhancerCon = _ref.badgeEnhancerContent,
      badgeEnhancerContent = _ref$badgeEnhancerCon === void 0 ? null : _ref$badgeEnhancerCon,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var _useStyletron = (0, _styles.useStyletron)(),
      _useStyletron2 = _slicedToArray(_useStyletron, 2),
      theme = _useStyletron2[1];

  var _getColors = getColors(kind, theme),
      color = _getColors.color,
      backgroundColor = _getColors.backgroundColor;

  var doesPinHeadTransformOnDrag = needle !== _constants.NEEDLE_SIZES.none && size !== _constants.PINHEAD_SIZES_SHAPES.xxSmallCircle && size !== _constants.PINHEAD_SIZES_SHAPES.xxSmallSquare;

  var _getOverrides = (0, _overrides.getOverrides)(overrides.Root, _styledComponents.StyledFixedMarkerRoot),
      _getOverrides2 = _slicedToArray(_getOverrides, 2),
      Root = _getOverrides2[0],
      rootProps = _getOverrides2[1];

  var _getOverrides3 = (0, _overrides.getOverrides)(overrides.DragContainer, _styledComponents.StyledFixedMarkerDragContainer),
      _getOverrides4 = _slicedToArray(_getOverrides3, 2),
      FixedMarkerDragContainer = _getOverrides4[0],
      fixedMarkerDragContainerProps = _getOverrides4[1];

  var renderNeedle = needle !== _constants.NEEDLE_SIZES.none && ![_constants.PINHEAD_SIZES_SHAPES.xxSmallCircle, _constants.PINHEAD_SIZES_SHAPES.xxSmallSquare].includes(size);

  if (process.env.NODE_ENV !== "production") {
    if (needle !== _constants.NEEDLE_SIZES.none && [_constants.PINHEAD_SIZES_SHAPES.xxSmallCircle, _constants.PINHEAD_SIZES_SHAPES.xxSmallSquare].includes(size)) {
      console.warn("Needles cannot be rendered with ".concat(_constants.PINHEAD_SIZES_SHAPES.xxSmallCircle, " or ").concat(_constants.PINHEAD_SIZES_SHAPES.xxSmallSquare, " pin heads"));
    }
  }

  var enhancers = {};

  if (startEnhancer) {
    enhancers.startEnhancer = startEnhancer;
  }

  if (endEnhancer) {
    enhancers.endEnhancer = endEnhancer;
  }

  return /*#__PURE__*/React.createElement(Root, _extends({
    "data-baseweb": "fixed-map-marker"
  }, rootProps), /*#__PURE__*/React.createElement(FixedMarkerDragContainer, _extends({
    $translateAmount: _constants.dragShadowMarginTop + _constants.dragShadowHeight,
    $performTranslate: doesPinHeadTransformOnDrag && !dragging
  }, fixedMarkerDragContainerProps), /*#__PURE__*/React.createElement(_pinHead.default, _extends({
    size: size,
    label: label
  }, enhancers, {
    color: color,
    background: backgroundColor,
    type: _constants.PINHEAD_TYPES.fixed,
    overrides: overrides,
    badgeEnhancerSize: badgeEnhancerSize,
    badgeEnhancerContent: badgeEnhancerContent,
    labelEnhancerContent: labelEnhancerContent,
    labelEnhancerPosition: labelEnhancerPosition,
    needle: needle
  })), renderNeedle && /*#__PURE__*/React.createElement(_needle.default, {
    size: needle,
    background: backgroundColor,
    overrides: overrides
  })), doesPinHeadTransformOnDrag && /*#__PURE__*/React.createElement(_dragShadow.default, {
    background: backgroundColor,
    dragging: dragging,
    height: _constants.dragShadowMarginTop + _constants.dragShadowHeight,
    overrides: overrides
  }));
};

var _default = FixedMarker;
exports.default = _default;