"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.styled = styled;
exports.useStyletron = useStyletron;
exports.withStyle = void 0;
exports.withWrapper = withWrapper;

var React = _interopRequireWildcard(require("react"));

var _styletronStandard = require("styletron-standard");

var _themes = require("../../themes");

var _createMockTheme = _interopRequireDefault(require("../../test/create-mock-theme"));

var _excluded = ["forwardedRef"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MOCK_THEME = (0, _createMockTheme.default)(_themes.LightTheme);

var IDENTITY = function IDENTITY(x) {
  return x;
};

function useStyletron() {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  function css(styles) {
    return _objectSpread({
      label: 'useStyletron mock describes the applied css properties'
    }, styles);
  }

  return [css, MOCK_THEME];
} // eslint-disable-next-line @typescript-eslint/no-explicit-any


function styled(ElementName) {
  var objOrFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var MockStyledComponent = /*#__PURE__*/function (_React$Component) {
    _inherits(MockStyledComponent, _React$Component);

    var _super = _createSuper(MockStyledComponent);

    function MockStyledComponent() {
      var _this;

      _classCallCheck(this, MockStyledComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "state", {});

      return _this;
    }

    _createClass(MockStyledComponent, [{
      key: "getPassedProps",
      value: function getPassedProps() {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var _this$props = this.props,
            forwardedRef = _this$props.forwardedRef,
            restProps = _objectWithoutProperties(_this$props, _excluded);

        return Object.keys(restProps).reduce(function (acc, key) {
          if (key[0] !== '$') {
            acc[key] = restProps[key];
          }

          return acc;
        }, {});
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(ElementName, _extends({
          ref: this.props.forwardedRef,
          "styled-component": "true",
          "test-style": JSON.stringify(this.state.styles, null, 2)
        }, this.getPassedProps()));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props) {
        var styleFnArg = _objectSpread(_objectSpread({}, props), {}, {
          // If we use defaultProps, $theme unnecessarily ends up in snapshots
          $theme: props.$theme || MOCK_THEME
        });

        var styles = typeof objOrFn === 'function' ? objOrFn(styleFnArg) : objOrFn; // Check for runtime overrides

        var $style = props.$style;

        if (typeof $style === 'function') {
          $style = $style(styleFnArg);
        }

        if ($style) {
          styles = _objectSpread(_objectSpread({}, styles), $style);
        }

        return {
          styles: styles
        };
      }
    }]);

    return MockStyledComponent;
  }(React.Component); // @ts-expect-error


  _defineProperty(MockStyledComponent, "displayName", 'MockStyledComponent');

  MockStyledComponent.__STYLETRON__ = {
    getInitialStyle: _styletronStandard.getInitialStyle,
    wrapper: IDENTITY,
    base: ElementName
  };
  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(MockStyledComponent, _extends({
      forwardedRef: ref
    }, props));
  });
}

var withStyle = styled;
exports.withStyle = withStyle;

function withWrapper( // eslint-disable-next-line @typescript-eslint/no-explicit-any
StyledElement, // eslint-disable-next-line @typescript-eslint/no-explicit-any
wrapperFn) {
  // eslint-disable-next-line react/display-name,@typescript-eslint/no-explicit-any
  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    return wrapperFn(StyledElement)(_objectSpread(_objectSpread({
      ref: ref
    }, props), {}, {
      $theme: MOCK_THEME
    }));
  });
}