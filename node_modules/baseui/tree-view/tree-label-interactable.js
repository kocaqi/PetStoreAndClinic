"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = require("./styled-components");

var _overrides = require("../helpers/overrides");

var _excluded = ["overrides"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var TreeLabelInteractable = function TreeLabelInteractable(_ref) {
  var _ref$overrides = _ref.overrides,
      overrides = _ref$overrides === void 0 ? {} : _ref$overrides,
      props = _objectWithoutProperties(_ref, _excluded);

  var LabelInteractable = (0, _overrides.getOverride)(overrides.LabelInteractable) || _styledComponents.StyledLabelInteractable;

  return (
    /*#__PURE__*/
    // $FlowExpectedError[cannot-spread-inexact]
    _react.default.createElement(LabelInteractable, _extends({
      onClick: function onClick(e) {
        return e.stopPropagation();
      },
      onKeyDown: function onKeyDown(e) {
        return e.stopPropagation();
      }
    }, props))
  );
};

var _default = TreeLabelInteractable;
exports.default = _default;