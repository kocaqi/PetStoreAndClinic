{"ast":null,"code":"/*\nCopyright (c) Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n// based on:\n// - https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/utils/focusVisible.js\n// - https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nvar initialized = false;\nvar hadKeyboardEvent = true;\nvar hadFocusVisibleRecently = false;\nvar hadFocusVisibleRecentlyTimeout = null;\nvar inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @return {boolean}\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  var type = node.type,\n    tagName = node.tagName;\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n  if (node.isContentEditable) {\n    return true;\n  }\n  return false;\n}\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\n\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n  hadKeyboardEvent = true;\n}\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\nexport function isFocusVisible(event) {\n  try {\n    return event.target.matches(':focus-visible');\n  } catch (error) {// browsers not implementing :focus-visible will throw a SyntaxError\n    // we use our own heuristic for those browsers\n    // rethrow might be better if it's not the expected error but do we really\n    // want to crash if focus-visible malfunctioned?\n  } // no need for validFocusTarget check. the user does that by attaching it to\n  // focusable events only\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(event.target);\n}\n/**\n * Should be called if a blur event is fired on a focus-visible element\n */\n\nexport function handleBlurVisible() {\n  // To detect a tab/window switch, we look for a blur event followed\n  // rapidly by a visibility change.\n  // If we don't see a visibility change within 100ms, it's probably a\n  // regular focus change.\n  hadFocusVisibleRecently = true;\n  if (typeof document !== 'undefined') {\n    window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n    hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n      hadFocusVisibleRecently = false;\n    }, 100);\n  }\n}\nexport function initFocusVisible(node) {\n  if (!initialized && node != null) {\n    initialized = true;\n    prepare(node.ownerDocument);\n  }\n}\nexport var forkFocus =\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction forkFocus(rootProps, handler) {\n  return function (e) {\n    if (typeof rootProps.onFocus === 'function') {\n      rootProps.onFocus(e);\n    }\n    handler(e);\n  };\n};\nexport var forkBlur =\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction forkBlur(rootProps, handler) {\n  return function (e) {\n    if (typeof rootProps.onBlur === 'function') {\n      rootProps.onBlur(e);\n    }\n    handler(e);\n  };\n};","map":{"version":3,"names":["initialized","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","focusTriggersKeyboardModality","node","type","tagName","readOnly","isContentEditable","handleKeyDown","event","metaKey","altKey","ctrlKey","handlePointerDown","handleVisibilityChange","visibilityState","prepare","doc","addEventListener","teardown","removeEventListener","isFocusVisible","target","matches","error","handleBlurVisible","document","window","clearTimeout","setTimeout","initFocusVisible","ownerDocument","forkFocus","rootProps","handler","e","onFocus","forkBlur","onBlur"],"sources":["/home/albi/Documents/ReactProject/pet-shop/node_modules/baseui/esm/utils/focusVisible.js"],"sourcesContent":["/*\nCopyright (c) Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n// based on:\n// - https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/utils/focusVisible.js\n// - https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nvar initialized = false;\nvar hadKeyboardEvent = true;\nvar hadFocusVisibleRecently = false;\nvar hadFocusVisibleRecentlyTimeout = null;\nvar inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @return {boolean}\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  var type = node.type,\n      tagName = node.tagName;\n\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n\n  if (node.isContentEditable) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\n\n\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  hadKeyboardEvent = true;\n}\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\n\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\n\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\n\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\nexport function isFocusVisible(event) {\n  try {\n    return event.target.matches(':focus-visible');\n  } catch (error) {// browsers not implementing :focus-visible will throw a SyntaxError\n    // we use our own heuristic for those browsers\n    // rethrow might be better if it's not the expected error but do we really\n    // want to crash if focus-visible malfunctioned?\n  } // no need for validFocusTarget check. the user does that by attaching it to\n  // focusable events only\n\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(event.target);\n}\n/**\n * Should be called if a blur event is fired on a focus-visible element\n */\n\nexport function handleBlurVisible() {\n  // To detect a tab/window switch, we look for a blur event followed\n  // rapidly by a visibility change.\n  // If we don't see a visibility change within 100ms, it's probably a\n  // regular focus change.\n  hadFocusVisibleRecently = true;\n\n  if (typeof document !== 'undefined') {\n    window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n    hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n      hadFocusVisibleRecently = false;\n    }, 100);\n  }\n}\nexport function initFocusVisible(node) {\n  if (!initialized && node != null) {\n    initialized = true;\n    prepare(node.ownerDocument);\n  }\n}\nexport var forkFocus = // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction forkFocus(rootProps, handler) {\n  return function (e) {\n    if (typeof rootProps.onFocus === 'function') {\n      rootProps.onFocus(e);\n    }\n\n    handler(e);\n  };\n};\nexport var forkBlur = // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction forkBlur(rootProps, handler) {\n  return function (e) {\n    if (typeof rootProps.onBlur === 'function') {\n      rootProps.onBlur(e);\n    }\n\n    handler(e);\n  };\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,WAAW,GAAG,KAAK;AACvB,IAAIC,gBAAgB,GAAG,IAAI;AAC3B,IAAIC,uBAAuB,GAAG,KAAK;AACnC,IAAIC,8BAA8B,GAAG,IAAI;AACzC,IAAIC,mBAAmB,GAAG;EACxBC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,IAAI;EACZC,GAAG,EAAE,IAAI;EACTC,GAAG,EAAE,IAAI;EACTC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAE,IAAI;EACdC,MAAM,EAAE,IAAI;EACZC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,IAAI;EACVC,IAAI,EAAE,IAAI;EACVC,QAAQ,EAAE,IAAI;EACd,gBAAgB,EAAE;AACpB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,6BAA6BA,CAACC,IAAI,EAAE;EAC3C,IAAIC,IAAI,GAAGD,IAAI,CAACC,IAAI;IAChBC,OAAO,GAAGF,IAAI,CAACE,OAAO;EAE1B,IAAIA,OAAO,KAAK,OAAO,IAAIhB,mBAAmB,CAACe,IAAI,CAAC,IAAI,CAACD,IAAI,CAACG,QAAQ,EAAE;IACtE,OAAO,IAAI;EACb;EAEA,IAAID,OAAO,KAAK,UAAU,IAAI,CAACF,IAAI,CAACG,QAAQ,EAAE;IAC5C,OAAO,IAAI;EACb;EAEA,IAAIH,IAAI,CAACI,iBAAiB,EAAE;IAC1B,OAAO,IAAI;EACb;EAEA,OAAO,KAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,aAAaA,CAACC,KAAK,EAAE;EAC5B,IAAIA,KAAK,CAACC,OAAO,IAAID,KAAK,CAACE,MAAM,IAAIF,KAAK,CAACG,OAAO,EAAE;IAClD;EACF;EAEA1B,gBAAgB,GAAG,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAAS2B,iBAAiBA,CAAA,EAAG;EAC3B3B,gBAAgB,GAAG,KAAK;AAC1B;AAEA,SAAS4B,sBAAsBA,CAAA,EAAG;EAChC,IAAI,IAAI,CAACC,eAAe,KAAK,QAAQ,EAAE;IACrC;IACA;IACA;IACA;IACA,IAAI5B,uBAAuB,EAAE;MAC3BD,gBAAgB,GAAG,IAAI;IACzB;EACF;AACF;AAEA,SAAS8B,OAAOA,CAACC,GAAG,EAAE;EACpBA,GAAG,CAACC,gBAAgB,CAAC,SAAS,EAAEV,aAAa,EAAE,IAAI,CAAC;EACpDS,GAAG,CAACC,gBAAgB,CAAC,WAAW,EAAEL,iBAAiB,EAAE,IAAI,CAAC;EAC1DI,GAAG,CAACC,gBAAgB,CAAC,aAAa,EAAEL,iBAAiB,EAAE,IAAI,CAAC;EAC5DI,GAAG,CAACC,gBAAgB,CAAC,YAAY,EAAEL,iBAAiB,EAAE,IAAI,CAAC;EAC3DI,GAAG,CAACC,gBAAgB,CAAC,kBAAkB,EAAEJ,sBAAsB,EAAE,IAAI,CAAC;AACxE;AAEA,OAAO,SAASK,QAAQA,CAACF,GAAG,EAAE;EAC5BA,GAAG,CAACG,mBAAmB,CAAC,SAAS,EAAEZ,aAAa,EAAE,IAAI,CAAC;EACvDS,GAAG,CAACG,mBAAmB,CAAC,WAAW,EAAEP,iBAAiB,EAAE,IAAI,CAAC;EAC7DI,GAAG,CAACG,mBAAmB,CAAC,aAAa,EAAEP,iBAAiB,EAAE,IAAI,CAAC;EAC/DI,GAAG,CAACG,mBAAmB,CAAC,YAAY,EAAEP,iBAAiB,EAAE,IAAI,CAAC;EAC9DI,GAAG,CAACG,mBAAmB,CAAC,kBAAkB,EAAEN,sBAAsB,EAAE,IAAI,CAAC;AAC3E;AACA,OAAO,SAASO,cAAcA,CAACZ,KAAK,EAAE;EACpC,IAAI;IACF,OAAOA,KAAK,CAACa,MAAM,CAACC,OAAO,CAAC,gBAAgB,CAAC;EAC/C,CAAC,CAAC,OAAOC,KAAK,EAAE,CAAC;IACf;IACA;IACA;EAAA,CACD,CAAC;EACF;;EAGA,OAAOtC,gBAAgB,IAAIgB,6BAA6B,CAACO,KAAK,CAACa,MAAM,CAAC;AACxE;AACA;AACA;AACA;;AAEA,OAAO,SAASG,iBAAiBA,CAAA,EAAG;EAClC;EACA;EACA;EACA;EACAtC,uBAAuB,GAAG,IAAI;EAE9B,IAAI,OAAOuC,QAAQ,KAAK,WAAW,EAAE;IACnCC,MAAM,CAACC,YAAY,CAACxC,8BAA8B,CAAC;IACnDA,8BAA8B,GAAGuC,MAAM,CAACE,UAAU,CAAC,YAAY;MAC7D1C,uBAAuB,GAAG,KAAK;IACjC,CAAC,EAAE,GAAG,CAAC;EACT;AACF;AACA,OAAO,SAAS2C,gBAAgBA,CAAC3B,IAAI,EAAE;EACrC,IAAI,CAAClB,WAAW,IAAIkB,IAAI,IAAI,IAAI,EAAE;IAChClB,WAAW,GAAG,IAAI;IAClB+B,OAAO,CAACb,IAAI,CAAC4B,aAAa,CAAC;EAC7B;AACF;AACA,OAAO,IAAIC,SAAS;AAAG;AACvB,SAASA,SAASA,CAACC,SAAS,EAAEC,OAAO,EAAE;EACrC,OAAO,UAAUC,CAAC,EAAE;IAClB,IAAI,OAAOF,SAAS,CAACG,OAAO,KAAK,UAAU,EAAE;MAC3CH,SAAS,CAACG,OAAO,CAACD,CAAC,CAAC;IACtB;IAEAD,OAAO,CAACC,CAAC,CAAC;EACZ,CAAC;AACH,CAAC;AACD,OAAO,IAAIE,QAAQ;AAAG;AACtB,SAASA,QAAQA,CAACJ,SAAS,EAAEC,OAAO,EAAE;EACpC,OAAO,UAAUC,CAAC,EAAE;IAClB,IAAI,OAAOF,SAAS,CAACK,MAAM,KAAK,UAAU,EAAE;MAC1CL,SAAS,CAACK,MAAM,CAACH,CAAC,CAAC;IACrB;IAEAD,OAAO,CAACC,CAAC,CAAC;EACZ,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}