function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverrides } from '../helpers/overrides';
import { StyledBadge, StyledRoot, StyledPositioner } from './styled-components';
import { PLACEMENT, ROLE, SHAPE, HIERARCHY } from './constants';
import { getAnchorFromChildren } from './utils';

const Badge = ({
  children,
  content,
  color,
  shape = SHAPE.rectangle,
  placement = PLACEMENT.topRight,
  hierarchy,
  horizontalOffset,
  verticalOffset,
  hidden,
  overrides = {}
}) => {
  const [Badge, badgeProps] = getOverrides(overrides.Badge, StyledBadge);
  const [Root, rootProps] = getOverrides(overrides.Root, StyledRoot);
  const [Positioner, positionerProps] = getOverrides(overrides.Positioner, StyledPositioner);
  const anchor = getAnchorFromChildren(children);
  const VALID_RECT_PLACEMENTS = [PLACEMENT.topLeft, PLACEMENT.topRight, PLACEMENT.bottomRight, PLACEMENT.bottomLeft];

  if (process.env.NODE_ENV !== "production") {
    if (shape === SHAPE.rectangle && !VALID_RECT_PLACEMENTS.includes(placement)) {
      console.warn('Rectangle badges should only be placed in a corner or used inline');
    }

    if (shape === SHAPE.rectangle && hierarchy === HIERARCHY.secondary && anchor) {
      console.warn('Secondary badges should not be positioned. Use the inline version of this badge instead.');
    }

    if (shape === SHAPE.pill && hierarchy === HIERARCHY.secondary) {
      console.warn('Pill badges should only be used with primary hierarchy');
    }
  } // If there's no anchor, render the badge inline


  if (!anchor) {
    return /*#__PURE__*/React.createElement(Badge, _extends({
      $hierarchy: hierarchy,
      $shape: shape,
      $color: color,
      $hidden: hidden
    }, badgeProps), content);
  }

  return /*#__PURE__*/React.createElement(Root, rootProps, anchor, /*#__PURE__*/React.createElement(Positioner, _extends({
    $horizontalOffset: horizontalOffset,
    $verticalOffset: verticalOffset,
    $placement: placement,
    $role: ROLE.badge
  }, positionerProps), /*#__PURE__*/React.createElement(Badge, _extends({
    $hierarchy: hierarchy,
    $shape: shape,
    $color: color,
    $hidden: hidden
  }, badgeProps), content)));
};

export default Badge;