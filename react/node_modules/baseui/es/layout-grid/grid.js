function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverrides } from '../helpers/overrides';
import { STYLE, STYLE_VALUES } from './constants';
import { StyledGrid as DefaultStyledGrid, StyledGridWrapper as DefaultStyledGridWrapper } from './styled-components';
export const GridContext = /*#__PURE__*/React.createContext({});
export default function Grid({
  align,
  behavior,
  children,
  gridColumns,
  gridGaps,
  gridGutters,
  gridMargins,
  gridMaxWidth,
  gridStyle = STYLE.default,
  gridUnit,
  overrides = {}
}) {
  const [StyledGrid, overrideProps] = getOverrides(overrides.Grid, DefaultStyledGrid);
  const [StyledGridWrapper, wrapperProps] = getOverrides(overrides.GridWrapper, DefaultStyledGridWrapper);
  const presetStyleValues = STYLE_VALUES[gridStyle];
  const gridStyleValues = presetStyleValues ? {
    $gridGutters: presetStyleValues.gutters,
    $gridMargins: presetStyleValues.margins,
    $gridMaxWidth: presetStyleValues.maxWidth,
    $gridUnit: presetStyleValues.unit
  } : {};
  const gridContextStyleValues = presetStyleValues && {
    gridColumns: presetStyleValues.columns,
    gridGaps: presetStyleValues.gaps,
    gridGutters: presetStyleValues.gutters,
    gridUnit: presetStyleValues.unit
  };
  return /*#__PURE__*/React.createElement(StyledGridWrapper, _extends({
    $behavior: behavior,
    $gridMargins: gridMargins != null ? gridMargins : gridStyleValues.$gridMargins,
    $gridMaxWidth: gridMaxWidth != null ? gridMaxWidth : gridStyleValues.$gridMaxWidth,
    $gridUnit: gridUnit != null ? gridUnit : gridStyleValues.$gridUnit
  }, wrapperProps), /*#__PURE__*/React.createElement(StyledGrid, _extends({
    $align: align,
    $behavior: behavior,
    $gridGutters: gridGutters != null ? gridGutters : gridStyleValues.$gridGutters,
    $gridMargins: gridMargins != null ? gridMargins : gridStyleValues.$gridMargins,
    $gridMaxWidth: gridMaxWidth != null ? gridMaxWidth : gridStyleValues.$gridMaxWidth,
    $gridUnit: gridUnit != null ? gridUnit : gridStyleValues.$gridUnit
  }, overrideProps), /*#__PURE__*/React.createElement(GridContext.Provider, {
    value: {
      gridColumns,
      gridGaps,
      gridGutters,
      gridUnit,
      ...gridContextStyleValues
    }
  }, children)));
}