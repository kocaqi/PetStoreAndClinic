function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverrides } from '../helpers/overrides';
import { dragShadowWidth } from './constants';
import { StyledDragShadow, StyledDragShadowContainer } from './styled-components';

const DragShadow = ({
  background,
  dragging,
  height,
  overrides = {}
}) => {
  const [DragShadowContainer, dragShadowContainerProps] = getOverrides(overrides.DragShadowContainer, StyledDragShadowContainer);
  const [DragShadow, dragShadowProps] = getOverrides(overrides.DragShadow, StyledDragShadow);
  return /*#__PURE__*/React.createElement(DragShadowContainer, _extends({
    $width: dragShadowWidth,
    $height: height,
    $dragging: dragging
  }, dragShadowContainerProps), /*#__PURE__*/React.createElement(DragShadow, _extends({
    $width: dragShadowWidth,
    $background: background
  }, dragShadowProps)));
};

export default DragShadow;