function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverrides } from '../helpers/overrides';
import { Root as StyledRoot, Label as StyledLabel, Input as StyledInput, RadioMarkInner as StyledRadioMarkInner, RadioMarkOuter as StyledRadioMarkOuter, Description as StyledDescription } from './styled-components';

function isLabelTopLeft(labelPlacement) {
  return labelPlacement === 'top' || labelPlacement === 'left';
}

function isLabelBottomRight(labelPlacement) {
  return labelPlacement === 'bottom' || labelPlacement === 'right';
}

const stopPropagation = e => e.stopPropagation();

class Radio extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isActive: false,
      isHovered: false
    });

    _defineProperty(this, "onMouseEnter", e => {
      this.setState({
        isHovered: true
      });
      this.props.onMouseEnter && this.props.onMouseEnter(e);
    });

    _defineProperty(this, "onMouseLeave", e => {
      this.setState({
        isHovered: false
      });
      this.props.onMouseLeave && this.props.onMouseLeave(e);
    });

    _defineProperty(this, "onMouseDown", e => {
      this.setState({
        isActive: true
      });
      this.props.onMouseDown && this.props.onMouseDown(e);
    });

    _defineProperty(this, "onMouseUp", e => {
      this.setState({
        isActive: false
      });
      this.props.onMouseUp && this.props.onMouseUp(e);
    });
  }

  componentDidMount() {
    if (this.props.autoFocus && this.props.inputRef?.current) {
      this.props.inputRef.current.focus();
    }
  }

  render() {
    const {
      overrides = {}
    } = this.props;
    const [Root, rootProps] = getOverrides(overrides.Root, StyledRoot);
    const [Label, labelProps] = getOverrides(overrides.Label, StyledLabel);
    const [Input, inputProps] = getOverrides(overrides.Input, StyledInput);
    const [Description, descriptionProps] = getOverrides(overrides.Description, StyledDescription);
    const [RadioMarkInner, radioMarkInnerProps] = getOverrides(overrides.RadioMarkInner, StyledRadioMarkInner);
    const [RadioMarkOuter, radioMarkOuterProps] = getOverrides(overrides.RadioMarkOuter, StyledRadioMarkOuter);
    const sharedProps = {
      $align: this.props.align,
      $checked: this.props.checked,
      $disabled: this.props.disabled,
      $hasDescription: !!this.props.description,
      $isActive: this.state.isActive,
      $error: this.props.error,
      $isFocused: this.props.isFocused,
      $isFocusVisible: this.props.isFocused && this.props.isFocusVisible,
      $isHovered: this.state.isHovered,
      $labelPlacement: this.props.labelPlacement,
      $required: this.props.required,
      $value: this.props.value
    };
    const label = /*#__PURE__*/React.createElement(Label, _extends({}, sharedProps, labelProps), this.props.containsInteractiveElement ?
    /*#__PURE__*/
    // Prevents the event from bubbling up to the label and moving focus to the radio button
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
    React.createElement("div", {
      onClick: e => e.preventDefault()
    }, this.props.children) : this.props.children);
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Root, _extends({
      "data-baseweb": "radio",
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      onMouseDown: this.onMouseDown,
      onMouseUp: this.onMouseUp
    }, sharedProps, rootProps), isLabelTopLeft(this.props.labelPlacement) && label, /*#__PURE__*/React.createElement(RadioMarkOuter, _extends({}, sharedProps, radioMarkOuterProps), /*#__PURE__*/React.createElement(RadioMarkInner, _extends({}, sharedProps, radioMarkInnerProps))), /*#__PURE__*/React.createElement(Input, _extends({
      "aria-invalid": this.props.error || null,
      checked: this.props.checked,
      disabled: this.props.disabled,
      name: this.props.name,
      onBlur: this.props.onBlur,
      onFocus: this.props.onFocus // Prevent a second click event from firing when label is clicked.
      // See https://github.com/uber/baseweb/issues/3847 & https://github.com/uber/baseweb/issues/4033
      ,
      onClick: stopPropagation,
      onChange: this.props.onChange,
      ref: this.props.inputRef,
      required: this.props.required,
      tabIndex: this.props.tabIndex,
      type: "radio",
      value: this.props.value
    }, sharedProps, inputProps)), isLabelBottomRight(this.props.labelPlacement) && label), !!this.props.description && /*#__PURE__*/React.createElement(Description, _extends({}, sharedProps, descriptionProps), this.props.description));
  }

}

_defineProperty(Radio, "defaultProps", {
  overrides: {},
  containsInteractiveElement: false,
  checked: false,
  disabled: false,
  autoFocus: false,
  inputRef: /*#__PURE__*/React.createRef(),
  align: 'vertical',
  error: false,
  onChange: () => {},
  onMouseEnter: () => {},
  onMouseLeave: () => {},
  onMouseDown: () => {},
  onMouseUp: () => {},
  onFocus: () => {},
  onBlur: () => {}
});

export default Radio;