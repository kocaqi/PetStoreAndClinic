var _excluded = ["initialTime", "paused", "onClick", "disabled", "children", "overrides"],
    _excluded2 = ["TimerContainer"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { Button, SIZE, KIND, SHAPE } from '../button';
import { BaseButtonTimed as StyledBaseButtonTimed, TimerContainer as StyledTimerContainer } from './styled-components';
import { formatTime } from './utils';
import { getOverrides, mergeOverrides } from '../helpers/overrides';

var ButtonTimed = function ButtonTimed(props) {
  var initialTime = props.initialTime,
      _props$paused = props.paused,
      paused = _props$paused === void 0 ? false : _props$paused,
      onClickProp = props.onClick,
      disabled = props.disabled,
      children = props.children,
      _props$overrides = props.overrides,
      overrides = _props$overrides === void 0 ? {} : _props$overrides,
      restProps = _objectWithoutProperties(props, _excluded);

  var _React$useState = React.useState(initialTime * 1000),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      timeRemaining = _React$useState2[0],
      setTimeRemaining = _React$useState2[1];

  React.useEffect(function () {
    var timerId = setTimeout(function () {
      if (timeRemaining > 0 && !paused) {
        setTimeRemaining(function (seconds) {
          return seconds - 100;
        });
      }
    }, 100);

    if (timeRemaining === 0) {
      onClickProp();
    }

    return function () {
      return clearTimeout(timerId);
    };
  }, [timeRemaining, paused]);

  var onClick = function onClick() {
    setTimeRemaining(0);
    onClickProp();
  };

  var TimerContainerOverride = overrides.TimerContainer,
      buttonOverrides = _objectWithoutProperties(overrides, _excluded2);

  var _getOverrides = getOverrides(TimerContainerOverride, StyledTimerContainer),
      _getOverrides2 = _slicedToArray(_getOverrides, 2),
      TimerContainer = _getOverrides2[0],
      timerContainerProps = _getOverrides2[1];

  var buttonMergedOverrides = mergeOverrides({
    BaseButton: {
      component: StyledBaseButtonTimed,
      props: {
        $initialTime: initialTime,
        $timeElapsed: (initialTime * 1000 - timeRemaining) / 1000
      },
      style: {
        ':after': {
          animationPlayState: paused ? 'paused' : 'running'
        }
      }
    }
  }, {
    Root: buttonOverrides.Root || {},
    BaseButton: buttonOverrides.BaseButton,
    StartEnhancer: buttonOverrides.StartEnhancer || {},
    EndEnhancer: buttonOverrides.EndEnhancer || {},
    LoadingSpinnerContainer: buttonOverrides.LoadingSpinnerContainer || {},
    LoadingSpinner: buttonOverrides.LoadingSpinner || {}
  });
  return /*#__PURE__*/React.createElement(Button, _extends({}, restProps, {
    overrides: buttonMergedOverrides,
    onClick: onClick,
    size: SIZE.large,
    kind: KIND.primary,
    shape: SHAPE.default,
    disabled: disabled || timeRemaining === 0
  }), children, /*#__PURE__*/React.createElement(TimerContainer, timerContainerProps, "(".concat(formatTime(timeRemaining), ")")));
};

export default ButtonTimed;