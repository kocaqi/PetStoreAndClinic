"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _overrides = require("../helpers/overrides");

var _styledComponents = require("./styled-components");

var _constants = require("./constants");

var _badgeEnhancer = _interopRequireDefault(require("./badge-enhancer"));

var _labelEnhancer = _interopRequireDefault(require("./label-enhancer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var PinHead = function PinHead(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? _constants.PINHEAD_SIZES_SHAPES.medium : _ref$size,
      _ref$label = _ref.label,
      label = _ref$label === void 0 ? '' : _ref$label,
      StartEnhancer = _ref.startEnhancer,
      EndEnhancer = _ref.endEnhancer,
      color = _ref.color,
      background = _ref.background,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? _constants.PINHEAD_TYPES.fixed : _ref$type,
      anchorType = _ref.anchorType,
      _ref$needle = _ref.needle,
      needle = _ref$needle === void 0 ? _constants.NEEDLE_SIZES.none : _ref$needle,
      labelEnhancerContent = _ref.labelEnhancerContent,
      labelEnhancerPosition = _ref.labelEnhancerPosition,
      badgeEnhancerSize = _ref.badgeEnhancerSize,
      badgeEnhancerContent = _ref.badgeEnhancerContent,
      _ref$overrides = _ref.overrides,
      overrides = _ref$overrides === void 0 ? {} : _ref$overrides;
  var activeElements = [label, StartEnhancer, EndEnhancer].filter(function (x) {
    return x;
  });
  var gridTemplateColumns = activeElements.map(function () {
    return 'auto';
  }).join(' ');
  var forceCircle = activeElements.length === 1 && !label;
  var _PINHEAD_DIMENSIONS$s = _constants.PINHEAD_DIMENSIONS[size],
      height = _PINHEAD_DIMENSIONS$s.height,
      icon = _PINHEAD_DIMENSIONS$s.icon;

  var _getOverrides = (0, _overrides.getOverrides)(overrides.PinHead, _styledComponents.StyledPinHead),
      _getOverrides2 = _slicedToArray(_getOverrides, 2),
      PinHead = _getOverrides2[0],
      pinHeadProps = _getOverrides2[1];

  var _getOverrides3 = (0, _overrides.getOverrides)(overrides.PinHeadContent, _styledComponents.StyledContentItem),
      _getOverrides4 = _slicedToArray(_getOverrides3, 2),
      ContentItem = _getOverrides4[0],
      contentItemProps = _getOverrides4[1];

  var _getOverrides5 = (0, _overrides.getOverrides)(overrides.InnerAnchor, _styledComponents.StyledInnerXXSmallAnchor),
      _getOverrides6 = _slicedToArray(_getOverrides5, 2),
      InnerXXSmallAnchor = _getOverrides6[0],
      innerXXSmallAnchorProps = _getOverrides6[1];

  var _getOverrides7 = (0, _overrides.getOverrides)(overrides.OuterAnchor, _styledComponents.StyledOuterXXSmallAnchor),
      _getOverrides8 = _slicedToArray(_getOverrides7, 2),
      OuterXXSmallAnchor = _getOverrides8[0],
      outerXXSmallAnchorProps = _getOverrides8[1];

  var _getOverrides9 = (0, _overrides.getOverrides)(overrides.InnerAnchor, _styledComponents.StyledInnerXSmallAnchor),
      _getOverrides10 = _slicedToArray(_getOverrides9, 2),
      InnerXSmallAnchor = _getOverrides10[0],
      innerXSmallAnchorProps = _getOverrides10[1];

  var _getOverrides11 = (0, _overrides.getOverrides)(overrides.OuterAnchor, _styledComponents.StyledOuterXSmallAnchor),
      _getOverrides12 = _slicedToArray(_getOverrides11, 2),
      OuterXSmallAnchor = _getOverrides12[0],
      outerXSmallAnchorProps = _getOverrides12[1];

  var badge = /*#__PURE__*/React.createElement(_badgeEnhancer.default, {
    markerType: type,
    pinHeadSize: size,
    badgeEnhancerSize: badgeEnhancerSize,
    badgeEnhancerContent: badgeEnhancerContent,
    overrides: overrides
  });

  if (type === _constants.PINHEAD_TYPES.fixed && (size === _constants.PINHEAD_SIZES_SHAPES.xxSmallCircle || size === _constants.PINHEAD_SIZES_SHAPES.xxSmallSquare)) {
    var round = size === _constants.PINHEAD_SIZES_SHAPES.xxSmallCircle;
    return /*#__PURE__*/React.createElement(OuterXXSmallAnchor, _extends({
      $round: round,
      $background: background,
      $size: height
    }, outerXXSmallAnchorProps), /*#__PURE__*/React.createElement(InnerXXSmallAnchor, _extends({
      $color: color,
      $round: round,
      $size: icon
    }, innerXXSmallAnchorProps)));
  }

  if (type === _constants.PINHEAD_TYPES.fixed && (size === _constants.PINHEAD_SIZES_SHAPES.xSmallSquare || size === _constants.PINHEAD_SIZES_SHAPES.xSmallCircle)) {
    var _round = size === _constants.PINHEAD_SIZES_SHAPES.xSmallCircle;

    return /*#__PURE__*/React.createElement(_styledComponents.RelativeContainer, null, badge, /*#__PURE__*/React.createElement(OuterXSmallAnchor, _extends({
      $round: _round,
      $background: background,
      $size: height
    }, outerXSmallAnchorProps), /*#__PURE__*/React.createElement(InnerXSmallAnchor, _extends({
      $color: color,
      $round: _round,
      $size: icon
    }, innerXSmallAnchorProps))));
  }

  return /*#__PURE__*/React.createElement(_styledComponents.RelativeContainer, null, /*#__PURE__*/React.createElement(_labelEnhancer.default, {
    labelEnhancerContent: labelEnhancerContent,
    labelEnhancerPosition: labelEnhancerPosition,
    needleHeight: _constants.NEEDLE_HEIGHTS[needle],
    size: size,
    overrides: overrides
  }), badge, /*#__PURE__*/React.createElement(PinHead, _extends({
    $background: background,
    $height: height,
    $gridTemplateColumns: gridTemplateColumns,
    $forceCircle: forceCircle,
    $type: type
  }, pinHeadProps), StartEnhancer && /*#__PURE__*/React.createElement(ContentItem, _extends({
    $height: height,
    $color: color,
    $size: size
  }, contentItemProps), /*#__PURE__*/React.createElement(StartEnhancer, {
    size: icon
  })), label && /*#__PURE__*/React.createElement(ContentItem, _extends({
    $height: height,
    $color: color,
    $size: size
  }, contentItemProps), label), EndEnhancer && /*#__PURE__*/React.createElement(ContentItem, _extends({
    $height: height,
    $color: color,
    $size: size
  }, contentItemProps), /*#__PURE__*/React.createElement(EndEnhancer, {
    size: icon
  }))));
};

var _default = PinHead;
exports.default = _default;