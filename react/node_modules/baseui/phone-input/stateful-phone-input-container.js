"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _constants = require("./constants");

var _defaultProps = _interopRequireDefault(require("./default-props"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// @ts-expect-error todo(flow->ts): possible bug
var defaultStateReducer = function defaultStateReducer(type, nextState) {
  return nextState;
};

var StatefulPhoneInputContainer = /*#__PURE__*/function (_React$Component) {
  _inherits(StatefulPhoneInputContainer, _React$Component);

  var _super = _createSuper(StatefulPhoneInputContainer);

  function StatefulPhoneInputContainer() {
    var _this;

    _classCallCheck(this, StatefulPhoneInputContainer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", _objectSpread({
      text: '',
      country: _constants.COUNTRIES.US
    }, _this.props.initialState));

    _defineProperty(_assertThisInitialized(_this), "internalSetState", function (type, nextState) {
      _this.setState(_this.props.stateReducer(type, nextState, _this.state));
    });

    _defineProperty(_assertThisInitialized(_this), "onTextChange", function (event) {
      _this.props.onTextChange(event);

      _this.internalSetState(_constants.STATE_CHANGE_TYPE.textChange, {
        text: event.target.value
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onCountryChange", function (event) {
      _this.props.onCountryChange(event);

      if (event.option && event.option.id) {
        _this.internalSetState(_constants.STATE_CHANGE_TYPE.countryChange, {
          country: _constants.COUNTRIES[event.option.id]
        });
      }
    });

    return _this;
  }

  _createClass(StatefulPhoneInputContainer, [{
    key: "render",
    value: function render() {
      return this.props.children(_objectSpread(_objectSpread({}, _defaultProps.default), {}, {
        'aria-label': this.props['aria-label'],
        'aria-labelledby': this.props['aria-labelledby'],
        'aria-describedby': this.props['aria-describedby'],
        disabled: this.props.disabled,
        error: this.props.error,
        id: this.props.id,
        maxDropdownHeight: this.props.maxDropdownHeight,
        maxDropdownWidth: this.props.maxDropdownWidth,
        mapIsoToLabel: this.props.mapIsoToLabel,
        name: this.props.name,
        overrides: this.props.overrides,
        placeholder: this.props.placeholder,
        positive: this.props.positive,
        required: this.props.required,
        size: this.props.size,
        clearable: this.props.clearable,
        country: this.state.country,
        text: this.state.text,
        onTextChange: this.onTextChange,
        onCountryChange: this.onCountryChange
      }));
    }
  }]);

  return StatefulPhoneInputContainer;
}(_react.default.Component);

exports.default = StatefulPhoneInputContainer;

_defineProperty(StatefulPhoneInputContainer, "defaultProps", {
  initialState: {
    text: _defaultProps.default.text,
    country: _defaultProps.default.country
  },
  onTextChange: _defaultProps.default.onTextChange,
  onCountryChange: _defaultProps.default.onTextChange,
  stateReducer: defaultStateReducer,
  overrides: {}
});