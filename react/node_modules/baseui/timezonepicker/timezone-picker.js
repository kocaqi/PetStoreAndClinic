"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _dateFnsTz = require("date-fns-tz");

var _overrides = require("../helpers/overrides");

var _locale = require("../locale");

var _select = require("../select");

var _tzdata = require("./tzdata");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TimezonePicker = /*#__PURE__*/function (_React$Component) {
  _inherits(TimezonePicker, _React$Component);

  var _super = _createSuper(TimezonePicker);

  function TimezonePicker() {
    var _this;

    _classCallCheck(this, TimezonePicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      timezones: [],
      value: null
    });

    _defineProperty(_assertThisInitialized(_this), "buildTimezones", function (compareDate) {
      var timezones = [];

      var _iterator = _createForOfIteratorHelper(_tzdata.zones),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var zoneName = _step.value;

          try {
            var offset = (0, _dateFnsTz.getTimezoneOffset)(zoneName, compareDate) / 3600000;
            var offsetFormatted = "".concat(offset >= 0 ? '+' : '-').concat(Math.abs(offset));
            var label = "(GMT".concat(offsetFormatted, ") ").concat(zoneName.replace(/_/g, ' '));

            if (_this.props.includeAbbreviations) {
              var abbreviation = (0, _dateFnsTz.format)(compareDate, 'zzz', {
                timeZone: zoneName
              });

              if (abbreviation) {
                label += " - ".concat(abbreviation);
              }
            }

            var offsetMinutes = offset * 60;
            timezones.push({
              id: zoneName,
              label: label,
              // offset output is in minutes, difference of UTC and this zone (negative for hours ahead of UTC, positive for hours behind)
              offset: offsetMinutes === 0 ? 0 : offsetMinutes * -1
            });
          } catch (error) {
            // Ignores timezones that are not available within a user's browser/operating system
            console.error("failed to format zone name ".concat(zoneName));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (_this.props.additionalTimezones) {
        timezones = timezones.concat(_this.props.additionalTimezones);
      } // Sorts W -> E, prioritizes america. could be more nuanced based on system tz but simple for now


      return timezones.sort(function (a, b) {
        var offsetDelta = b.offset - a.offset;
        if (offsetDelta !== 0) return offsetDelta;

        if (typeof a.label === 'string' && typeof b.label === 'string') {
          if (a.label < b.label) return -1;
          if (a.label > b.label) return 1;
        }

        return 0;
      });
    });

    return _this;
  }

  _createClass(TimezonePicker, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var timezones = this.buildTimezones(this.props.date || new Date());

      if (typeof document !== 'undefined') {
        if (!this.props.value) {
          var tz = Intl.DateTimeFormat().resolvedOptions().timeZone;
          this.setState({
            timezones: timezones,
            value: tz
          });
          var option = timezones.find(function (o) {
            return o.id === tz;
          });
          option && this.props.onChange && this.props.onChange(option);
        } else {
          this.setState({
            timezones: timezones
          });
        }
      } else {
        this.setState({
          timezones: timezones
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      var prevTime = prevProps.date ? prevProps.date.getTime() : 0;
      var nextTime = this.props.date ? this.props.date.getTime() : 0;

      if (prevTime !== nextTime) {
        var timezones = this.buildTimezones(this.props.date || new Date());
        this.setState({
          timezones: timezones
        });
        var option = timezones.find(function (o) {
          return o.id === _this2.state.value;
        });
        option && this.props.onChange && this.props.onChange(option);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props$overrides = this.props.overrides,
          overrides = _this$props$overrides === void 0 ? {} : _this$props$overrides;

      var _getOverrides = (0, _overrides.getOverrides)(overrides.Select, _select.Select),
          _getOverrides2 = _slicedToArray(_getOverrides, 2),
          OverriddenSelect = _getOverrides2[0],
          selectProps = _getOverrides2[1];

      selectProps.overrides = (0, _overrides.mergeOverrides)({
        Dropdown: {
          style: {
            maxHeight: '360px'
          }
        }
      }, selectProps.overrides);
      var options = this.state.timezones;

      if (this.props.mapLabels) {
        options = options.map(function (option) {
          option.label = _this3.props.mapLabels(option);
          return option;
        });
      }

      return /*#__PURE__*/React.createElement(_locale.LocaleContext.Consumer, null, function (locale) {
        return /*#__PURE__*/React.createElement(OverriddenSelect, _extends({
          "aria-label": locale.datepicker.timezonePickerAriaLabel,
          options: options,
          clearable: false,
          disabled: _this3.props.disabled,
          error: _this3.props.error,
          positive: _this3.props.positive,
          size: _this3.props.size,
          onChange: function onChange(params) {
            if (params.type === 'clear') {
              _this3.setState({
                value: ''
              });

              _this3.props.onChange && _this3.props.onChange(null);
            } else {
              _this3.setState({
                value: params.option.id
              });

              _this3.props.onChange && _this3.props.onChange(params.option);
            }
          },
          value: _this3.props.value || _this3.state.value ? [{
            id: _this3.props.value || _this3.state.value
          }] : null
        }, selectProps));
      });
    }
  }]);

  return TimezonePicker;
}(React.Component);

var _default = TimezonePicker;
exports.default = _default;