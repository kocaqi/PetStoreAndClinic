import type { TreeNodeData, TreeNodeId } from './types';
export declare const getParentId: (nodes: TreeNodeData[], nodeId: TreeNodeId, parentId: TreeNodeId | null, getId: (a: TreeNodeData) => TreeNodeId) => any;
export declare const getPrevId: (nodes: TreeNodeData[], nodeId: TreeNodeId, parentId: TreeNodeId | null, getId: (a: TreeNodeData) => TreeNodeId) => any;
export declare const getFirstChildId: (nodes: TreeNodeData[], nodeId: TreeNodeId, getId: (a: TreeNodeData) => TreeNodeId) => any;
export declare const getNextId: (nodes: TreeNodeData[], nodeId: TreeNodeId, closestOmmer: TreeNodeId | null, getId: (a: TreeNodeData) => TreeNodeId) => any;
export declare const getEndId: (nodes: TreeNodeData[], getId: (a: TreeNodeData) => TreeNodeId) => any;
export declare const getExpandableSiblings: (nodes: TreeNodeData[], nodeId: TreeNodeId, getId: (a: TreeNodeData) => TreeNodeId) => any;
export declare const toggleIsExpanded: (arr: TreeNodeData[], toggledNode: TreeNodeData, getId?: (node: TreeNodeData) => TreeNodeId) => TreeNodeData[];
export declare const getCharMatchId: (nodes: TreeNodeData[], nodeId: TreeNodeId, chars: string, closestOmmer: TreeNodeId | null, getId: (a: TreeNodeData) => TreeNodeId) => any;
export declare const matchString: (nodes: TreeNodeData[], nodeId: TreeNodeId, chars: string, closestOmmer: TreeNodeId | null, getId: (a: TreeNodeData) => TreeNodeId, matchPrefix: boolean) => any;
export declare const defaultGetId: (node: TreeNodeData) => TreeNodeId;
