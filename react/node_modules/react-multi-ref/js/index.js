"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var MultiRef = /*#__PURE__*/function () {
  function MultiRef() {
    (0, _classCallCheck2["default"])(this, MultiRef);
    (0, _defineProperty2["default"])(this, "map", new Map());
    (0, _defineProperty2["default"])(this, "_refFns", new Map());
  }

  (0, _createClass2["default"])(MultiRef, [{
    key: "ref",
    value: function ref(key) {
      var _this = this;

      var refFn = this._refFns.get(key);

      if (refFn) {
        return refFn;
      } else {
        var _refFn = function _refFn(value) {
          if (value == null) {
            _this._refFns["delete"](key);

            _this.map["delete"](key);
          } else {
            _this._refFns.set(key, _refFn);

            _this.map.set(key, value);
          }
        }; // We don't put `refFn` into `this._refFns` yet, because if the current render
        // is aborted, then it's possible than `refFn(null)` won't be called later
        // and its cleanup will never happen. We shouldn't cause any side effects that
        // need cleaning up later until `refFn` gets called with a non-null value.


        return _refFn;
      }
    }
  }]);
  return MultiRef;
}();

exports["default"] = MultiRef;
//# sourceMappingURL=index.js.map