function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-env browser */

/* eslint-disable no-unused-vars, no-redeclare, no-shadow */
import * as React from "react";
import { driver, getInitialStyle } from "styletron-standard";
import { addDebugMetadata, setupDevtoolsExtension, DebugEngine } from "./dev-tool";
export { DebugEngine };
const noopEngine = {
  renderStyle: () => "",
  renderKeyframes: () => "",
  renderFontFace: () => ""
};
const StyletronContext = /*#__PURE__*/React.createContext(noopEngine);
const HydrationContext = /*#__PURE__*/React.createContext(false);
const DebugEngineContext = /*#__PURE__*/React.createContext(undefined); //todo: theme context removed

class DevProvider extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      hydrating: Boolean(props.debugAfterHydration)
    };
  }

  componentDidMount() {
    if (true) {
      if (this.state.hydrating === true) {
        this.setState({
          hydrating: false
        });
      }
    }
  }

  render() {
    return /*#__PURE__*/React.createElement(StyletronContext.Provider, {
      value: this.props.value
    }, /*#__PURE__*/React.createElement(DebugEngineContext.Provider, {
      value: this.props.debug
    }, /*#__PURE__*/React.createElement(HydrationContext.Provider, {
      value: this.state.hydrating
    }, this.props.children)));
  }

}

export const Provider = true && process.env.NODE_ENV !== "production" ? DevProvider : StyletronContext.Provider;

if (true && process.env.NODE_ENV !== "production" && !window.__STYLETRON_DEVTOOLS__) {
  setupDevtoolsExtension();
}

function checkNoopEngine(engine) {
  // if no engine provided, we default to no-op, handy for tests
  // however, print a warning in other envs
  if (process.env.NODE_ENV !== "test") {
    engine === noopEngine && // eslint-disable-next-line no-console
    console.warn(process.env.NODE_ENV !== "production" ? `
Styletron has been switched to a no-op (test) mode.

A Styletron styled component was rendered, but no Styletron engine instance was provided in React context.

Did you forget to provide a Styletron engine instance to React context via using the Styletron provider component?

Note: Providers and Consumers must come from the exact same React.createContext call to work.
If your app has multiple instances of the "styletron-react" package in your node_module tree,
your Provider may be coming from a different React.createContext call, which means the styled components
will not recieve the provided engine instance. This scenario can arise, for example, when using "npm link".
` : `Styletron Provider is not set up. Defaulting to no-op.`);
  }
}

export function useStyletron() {
  const styletronEngine = React.useContext(StyletronContext);
  const debugEngine = React.useContext(DebugEngineContext);
  const hydrating = React.useContext(HydrationContext);
  checkNoopEngine(styletronEngine);
  const debugClassName = React.useRef("");
  const prevDebugClassNameDeps = React.useRef([]);
  return [function css(style) {
    const className = driver(style, styletronEngine);

    if (!(true && process.env.NODE_ENV !== "production")) {
      return className;
    }

    const {
      stack,
      message
    } = new Error("stacktrace source");
    const nextDeps = [debugEngine, hydrating];

    if (prevDebugClassNameDeps.current[0] !== nextDeps[0] || prevDebugClassNameDeps.current[1] !== nextDeps[1]) {
      if (debugEngine && !hydrating) {
        debugClassName.current = debugEngine.debug({
          stackInfo: {
            stack,
            message
          },
          stackIndex: 1
        });
      }

      prevDebugClassNameDeps.current = nextDeps;
    }

    if (debugClassName.current) {
      return `${debugClassName.current} ${className}`;
    }

    return className;
  }];
}
export function createStyled({
  getInitialStyle,
  driver,
  wrapper
}) {
  function styled(base, styleArg) {
    if (process.env.NODE_ENV !== "production") {
      if (base.__STYLETRON__) {
        /* eslint-disable no-console */
        console.warn("It appears you are passing a styled component into `styled`.");
        console.warn("For composition with existing styled components, use `withStyle` or `withTransform` instead.");
        /* eslint-enable no-console */
      }
    }

    const baseStyletron = {
      reducers: [],
      base: base,
      driver,
      getInitialStyle,
      wrapper
    };

    if (true && process.env.NODE_ENV !== "production") {
      addDebugMetadata(baseStyletron, 2);
    }

    return createStyledElementComponent(autoComposeShallow(baseStyletron, styleArg));
  }

  return styled;
}
export const styled = createStyled({
  getInitialStyle,
  driver,
  wrapper: Component => Component
});
export const withTransform = (component, transformer) => {
  const styletron = component.__STYLETRON__;

  if (true && process.env.NODE_ENV !== "production") {
    addDebugMetadata(styletron, 2);
  }

  return createStyledElementComponent(composeDynamic(styletron, transformer));
};
export const withStyleDeep = (component, styleArg) => {
  // @ts-ignore
  const styletron = component.__STYLETRON__;

  if (process.env.NODE_ENV !== "production") {
    if (!styletron) {
      /* eslint-disable no-console */
      console.warn("The first parameter to `withStyle` must be a styled component (without extra wrappers).");
      /* eslint-enable no-console */
    }
  }

  if (true && process.env.NODE_ENV !== "production") {
    addDebugMetadata(styletron, 2);
    return createStyledElementComponent(addExtension(autoComposeDeep(styletron, styleArg), component, styleArg));
  } else {
    return createStyledElementComponent(autoComposeDeep(styletron, styleArg));
  }
};
export const withStyle = withStyleDeep;
export const withWrapper = (component, wrapper) => {
  const styletron = component.__STYLETRON__;

  if (process.env.NODE_ENV !== "production") {
    if (!styletron) {
      /* eslint-disable no-console */
      console.warn("The first parameter to `withWrapper` must be a styled component (without extra wrappers).");
      /* eslint-enable no-console */
    }
  }

  const composed = {
    getInitialStyle: styletron.getInitialStyle,
    base: styletron.base,
    driver: styletron.driver,
    wrapper: wrapper,
    reducers: styletron.reducers
  };

  if (true && process.env.NODE_ENV !== "production") {
    addDebugMetadata(composed, 2);
  }

  return createStyledElementComponent(composed);
};
export function autoComposeShallow(styletron, styleArg) {
  if (typeof styleArg === "function") {
    return dynamicComposeShallow(styletron, styleArg);
  }

  return staticComposeShallow(styletron, styleArg);
}

function addExtension(composed, component, styleArg) {
  return { ...composed,
    ext: {
      with: styleArg,
      name: component.displayName,
      base: component.__STYLETRON__.base,
      getInitialStyle: component.__STYLETRON__.reducers.length ? component.__STYLETRON__.reducers[0].reducer : component.__STYLETRON__.getInitialStyle
    }
  };
}

export function autoComposeDeep(styletron, styleArg) {
  if (typeof styleArg === "function") {
    return dynamicComposeDeep(styletron, styleArg);
  }

  return staticComposeDeep(styletron, styleArg);
}
export function staticComposeShallow(styletron, style) {
  return composeStatic(styletron, createShallowMergeReducer(style));
}
export function staticComposeDeep(styletron, style) {
  return composeStatic(styletron, createDeepMergeReducer(style));
}
export function dynamicComposeShallow(styletron, styleFn) {
  return composeDynamic(styletron, (style, props) => shallowMerge(style, styleFn(props)));
}
export function dynamicComposeDeep(styletron, styleFn) {
  return composeDynamic(styletron, (style, props) => deepMerge(style, styleFn(props)));
}
export function createShallowMergeReducer(style) {
  return {
    reducer: inputStyle => shallowMerge(inputStyle, style),
    assignmentCommutative: true,
    factory: createShallowMergeReducer,
    style: style
  };
}
export function createDeepMergeReducer(style) {
  return {
    reducer: inputStyle => deepMerge(inputStyle, style),
    assignmentCommutative: true,
    factory: createDeepMergeReducer,
    style: style
  };
}
export function composeStatic(styletron, reducerContainer) {
  if (styletron.reducers.length === 0) {
    const style = reducerContainer.reducer(styletron.getInitialStyle());
    const result = {
      reducers: styletron.reducers,
      base: styletron.base,
      driver: styletron.driver,
      wrapper: styletron.wrapper,
      getInitialStyle: () => style
    };

    if (true && process.env.NODE_ENV !== "production") {
      result.debug = styletron.debug;
    }

    return result;
  } else {
    const last = styletron.reducers[0];

    if (last.assignmentCommutative === true && reducerContainer.assignmentCommutative === true) {
      const composed = reducerContainer.reducer(last.style);
      const result = {
        getInitialStyle: styletron.getInitialStyle,
        base: styletron.base,
        driver: styletron.driver,
        wrapper: styletron.wrapper,
        reducers: [last.factory(composed)].concat(styletron.reducers.slice(1))
      };

      if (true && process.env.NODE_ENV !== "production") {
        result.debug = styletron.debug;
      }

      return result;
    }

    return composeDynamic(styletron, reducerContainer.reducer);
  }
}
export function composeDynamic(styletron, reducer) {
  const composed = {
    getInitialStyle: styletron.getInitialStyle,
    base: styletron.base,
    driver: styletron.driver,
    wrapper: styletron.wrapper,
    // @ts-ignore
    reducers: [{
      assignmentCommutative: false,
      reducer
    }].concat(styletron.reducers)
  };

  if (true && process.env.NODE_ENV !== "production") {
    composed.debug = styletron.debug;
  }

  return composed;
}
export function createStyledElementComponent(styletron) {
  const {
    reducers,
    base,
    driver,
    wrapper,
    getInitialStyle,
    ext
  } = styletron;

  if (true && process.env.NODE_ENV !== "production") {
    var debugStackInfo, debugStackIndex;

    if (styletron.debug) {
      debugStackInfo = styletron.debug.stackInfo;
      debugStackIndex = styletron.debug.stackIndex;
    }
  }

  if (true && process.env.NODE_ENV !== "production") {
    var debugClassName;
  }

  const StyledElement = /*#__PURE__*/React.forwardRef((props, ref) => {
    const styletron = React.useContext(StyletronContext);
    const debugEngine = React.useContext(DebugEngineContext);
    const hydrating = React.useContext(HydrationContext);
    checkNoopEngine(styletron);
    const elementProps = omitPrefixedKeys(props);
    let style = resolveStyle(getInitialStyle, reducers, props);

    if (props.$style) {
      if (typeof props.$style === "function") {
        style = deepMerge(style, props.$style(props));
      } else {
        style = deepMerge(style, props.$style);
      }
    }

    const styleClassString = driver(style, styletron);
    const Element = props.$as ? props.$as : base;
    elementProps.className = props.className ? `${props.className} ${styleClassString}` : styleClassString;

    if (true && process.env.NODE_ENV !== "production" && debugEngine && !hydrating) {
      if (!debugClassName) {
        debugClassName = debugEngine.debug({
          stackInfo: debugStackInfo,
          stackIndex: debugStackIndex
        });
      }

      const joined = `${debugClassName} ${elementProps.className}`;
      elementProps.className = joined;
    }

    if (true && process.env.NODE_ENV !== "production" && window.__STYLETRON_DEVTOOLS__) {
      window.__STYLETRON_DEVTOOLS__.stylesMap.set(elementProps.className, style);

      if (ext) {
        window.__STYLETRON_DEVTOOLS__.extensionsMap.set(elementProps.className, {
          base: ext.base,
          displayName: ext.name,
          initialStyles: ext.getInitialStyle({}, props),
          styleOverrides: typeof ext.with === "function" ? ext.with(props) : ext.with
        });
      }
    }

    if (props.$ref) {
      // eslint-disable-next-line no-console
      console.warn("The prop `$ref` has been deprecated. Use `ref` instead. Refs are now forwarded with React.forwardRef.");
    }

    return /*#__PURE__*/React.createElement(Element, _extends({}, elementProps, {
      ref: ref || props.$ref
    }));
  });
  const Wrapped = wrapper(StyledElement);
  Wrapped.__STYLETRON__ = {
    base,
    reducers,
    driver,
    wrapper,
    getInitialStyle
  };

  if (process.env.NODE_ENV !== "production") {
    let displayName;

    if (typeof base === "string") {
      displayName = base;
    } else if (base.displayName) {
      displayName = base.displayName;
    } else if (base.name) {
      displayName = base.name;
    } else {
      displayName = "Unknown";
    }

    Wrapped.displayName = `Styled(${displayName})`;
  }

  return Wrapped;
} // Utility functions

export function resolveStyle(getInitialStyle, reducers, props) {
  let result = getInitialStyle();
  let i = reducers.length;

  while (i--) {
    // Cast to allow passing unused props param in case of static reducer
    const reducer = reducers[i].reducer;
    result = reducer(result, props);
  }

  return result;
}

function isObject(x) {
  return typeof x === "object" && x !== null;
}

function omitPrefixedKeys(source) {
  const result = {};

  for (const key in source) {
    if (key[0] !== "$") {
      result[key] = source[key];
    }
  }

  return result;
}

function deepMerge(a, b) {
  const result = assign({}, a);

  for (const key in b) {
    const val = b[key];

    if (isObject(val) && isObject(a[key])) {
      result[key] = deepMerge(a[key], val);
    } else {
      result[key] = val;
    }
  }

  return result;
}

function shallowMerge(a, b) {
  return assign(assign({}, a), b);
}

function assign(target, source) {
  for (const key in source) {
    target[key] = source[key];
  }

  return target;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,